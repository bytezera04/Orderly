
@using Orderly.Client.Pages.Shared
@using Orderly.Client.Services
@using Orderly.Client.Components
@using Orderly.Shared.Dtos
@using Orderly.Shared.Helpers
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client

@page "/dashboard/products"
@namespace Orderly.Client.Pages.Dashboard
@layout DashboardLayout

@attribute [Authorize]

<PageTitle>Products - Orderly</PageTitle>

<div class="flex flex-col w-full max-w-screen-xl mx-auto p-4 sm:p-6 lg:p-8 space-y-6">
    @*
        Title
    *@

    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <h1 class="text-3xl font-bold mb-6 text-lightfg dark:text-darkfg">Manage Products</h1>

        <button class="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/80 transition"
                @onclick="ShowCreateModal">
            Add Product
        </button>
    </div>

    @*
        Additional Messages
    *@

    @if (IsDemoMode())
    {
        <div class="flex items-center gap-2 p-3 border-l-4 border-yellow-600
                    bg-[#facc15] text-yellow-900
                    dark:bg-yellow-900/20 dark:text-yellow-300 rounded-md">
            <i class="bi bi-exclamation-triangle-fill text-xl"></i>
            <span>This site is in <strong>demo mode</strong>. Products you create are only visible in your personal dashboard.</span>
        </div>
    }

    @*
        Product Table
    *@

    <ProductTable CanEditProducts="true" CanDeleteProducts="true" />
</div>

<!-- Product Create Modal -->

<ProductCreateModal IsVisible="@IsCreateProductModalVisible"
                    OnCreate="CloseCreateModal"
                    OnCancel="CloseCreateModal" />

@code {
    private bool IsCreateProductModalVisible = false;

    private void ShowCreateModal()
    {
        IsCreateProductModalVisible = true;
    }

    private void CloseCreateModal()
    {
        IsCreateProductModalVisible = false;
    }

    private bool IsDemoMode()
    {
        return _Config.GetValue<bool>("DemoMode") is true;
    }

    [Inject]
    private IConfiguration _Config { get; set; }
}
