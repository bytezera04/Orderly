
@using Microsoft.AspNetCore.SignalR.Client
@using Orderly.Client.Services
@using Orderly.Shared.Dtos
@using System.Globalization
@using Orderly.Shared.Helpers

@implements IAsyncDisposable

@namespace Orderly.Client.Components

<div class="order-table flex flex-col w-full space-y-4">
    @*
        Search Inputs
    *@

    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <!-- Search Bar-->

        <input type="text"
               placeholder="Search orders..."
               class="w-full px-4 py-2 border border-gray-300 rounded-md
                  text-lightfg bg-lightbg
                  focus:outline-none focus:ring-2 focus:ring-primary
                  dark:bg-darkcard dark:border-darkborder dark:text-darkfg"
               @oninput="OnSearchInput" />

        <!-- Status Dropdown -->

        <select class="w-full sm:w-auto px-4 py-2 border border-gray-300 rounded-md h-[calc(2.5rem)]
                   text-lightfg bg-lightbg
                   focus:outline-none focus:ring-2 focus:ring-primary
                   dark:bg-darkcard dark:border-darkborder dark:text-darkfg"
                @onchange="OnStatusInput">

            <option value="">All Statuses</option>

            @foreach (var status in Statuses)
            {
                <option value="@status">@status</option>
            }
        </select>
    </div>

    @*
        Order Table (Desktop)
    *@

    <div class="overflow-hidden border border-lightborder dark:border-darkborder rounded-lg shadow hidden md:block">
        <table class="min-w-full divide-y divide-lightborder dark:divide-darkborder">
            <thead class="bg-lightcard dark:bg-darkcard">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-sm font-semibold text-lightfg dark:text-darkfg">
                        ID
                    </th>

                    @foreach (var col in Columns)
                    {
                        <th scope="col"
                            class="px-6 py-3 text-left text-sm font-semibold text-lightfg dark:text-darkfg cursor-pointer select-none"
                            @onclick="() => SortBy(col.Property)">
                            @col.Title
                            <span>@GetSortIndicator(col.Property)</span>
                        </th>
                    }

                    @if (DisplayActionsColumn())
                    {
                        <th scope="col" class="px-6 py-3 text-left text-sm font-semibold text-lightfg dark:text-darkfg">
                            Actions
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="bg-lightbg dark:bg-darkbg divide-y divide-lightborder dark:divide-darkborder text-lightfg dark:text-darkfg">
                @for (int i = 0; i < PageSize; i++)
                {
                    if (i < PagedOrders.Count())
                    {
                        var order = PagedOrders.ElementAt(i);

                        <tr class="hover:bg-lightcard/20 dark:hover:bg-darkcard/20 transition cursor-pointer h-[64px]"
                            @onclick="() => OpenViewModal(order)">

                            <td class="px-6 truncate font-bold text-primary">#@order.PublicId</td>
                            <td class="px-6 truncate">@StringHelper.Truncate(GetOtherUserName(order), 15)</td>
                            <td class="px-6 truncate">@StringHelper.Truncate(order.ProductDisplayName, 25)</td>
                            <td class="px-6 truncate">@order.Status</td>
                            <td class="px-6 truncate">@order.Quantity</td>
                            <td class="px-6 truncate">£@order.Price</td>
                            <td class="px-6 truncate">@DateTimeHelper.ToReadableDateShort(order.CreatedAt)</td>

                            @if (DisplayActionsColumn())
                            {
                                <!-- Action Controls -->

                                <td class="px-6">
                                    <div class="flex items-center justify-center gap-3">
                                        @if (CanEditOrders || CanCancelOrders)
                                        {
                                            <button class="text-blue-500 hover:text-blue-600 transition text-lg"
                                                    @onclick="@(() => OpenManageModal(order))"
                                                    @onclick:stopPropagation="true">
                                                <i class="bi bi-gear-fill"></i>
                                            </button>
                                        }

                                        @if (CanViewChat)
                                        {
                                            <button class="text-green-500 hover:text-green-600 transition text-lg"
                                                    @onclick="() => NavigateToChat(order)"
                                                    @onclick:stopPropagation="true">
                                                <i class="bi bi-chat-dots-fill"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                    else
                    {
                        <tr class="h-[64px]">
                            <td colspan="@Columns.Count + (DisplayActionsColumn() ? 1 : 0)"></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    @*
        Order Cards (Mobile)
    *@

    <div class="flex flex-col space-y-4 md:hidden">
        @foreach (var order in PagedOrders)
        {
            <div class="p-4 bg-lightcard dark:bg-darkcard rounded-lg shadow hover:shadow-md transition cursor-pointer"
                 @onclick="() => OpenViewModal(order)">

                <div class="flex justify-between items-start">
                    <span class="font-bold text-primary">#@order.PublicId</span>
                    @if (DisplayActionsColumn())
                    {
                        <div class="flex items-center gap-3">
                            @if (CanEditOrders || CanCancelOrders)
                            {
                                <button @onclick="() => OpenManageModal(order)"
                                        @onclick:stopPropagation="true"
                                        class="text-blue-500 hover:text-blue-600 transition text-lg">
                                    <i class="bi bi-gear-fill"></i>
                                </button>
                            }

                            @if (CanViewChat)
                            {
                                <button @onclick="() => NavigateToChat(order)"
                                        @onclick:stopPropagation="true"
                                        class="text-green-500 hover:text-green-600 transition text-lg">
                                    <i class="bi bi-chat-dots-fill"></i>
                                </button>
                            }
                        </div>
                    }
                </div>

                <div class="mt-2 space-y-1 text-sm text-lightfg dark:text-darkfg">
                    <div><span class="font-medium">Owner:</span> @GetOtherUserName(order)</div>
                    <div><span class="font-medium">Product:</span> @order.ProductDisplayName</div>
                    <div><span class="font-medium">Status:</span> @order.Status</div>
                    <div><span class="font-medium">Quantity:</span> @order.Quantity</div>
                    <div><span class="font-medium">Price:</span> @order.Price</div>
                    <div><span class="font-medium">Created:</span> @DateTimeHelper.ToReadableDateShort(order.CreatedAt)</div>
                </div>
            </div>
        }
    </div>

    @*
        Pagination
    *@

    <div class="flex items-center justify-center gap-4 mt-2">
        <button class="p-2 rounded-md hover:bg-lightcard/50 dark:hover:bg-darkcard/50"
                @onclick="PreviousPage" disabled="@IsFirstPage">
            <i class="bi bi-chevron-left text-lg"></i>
        </button>

        <span class="text-sm text-lightfg dark:text-darkfg">Page @Page of @TotalPages</span>

        <button class="p-2 rounded-md hover:bg-lightcard/50 dark:hover:bg-darkcard/50"
                @onclick="NextPage" disabled="@IsLastPage">
            <i class="bi bi-chevron-right text-lg"></i>
        </button>
    </div>
</div>

<!-- Order View Modal -->

<OrderViewModal IsVisible="@IsViewModalVisible"
                OrderToView="@SelectedOrder"
                OnClose="@CloseViewModal" />

<!-- Order Manage Modal -->

<OrderManageModal IsVisible="@IsManageModalVisible"
                OrderToManage="@SelectedOrder"
                UserRole="@UserRole"
                CanEditOrders="@CanEditOrders"
                CanCancelOrders="@CanCancelOrders"
                OnEdit="@CloseManageModal"
                OnCancel="@CloseManageModal"
                OnClose="@CloseManageModal" />

@code {
    [Parameter]
    public string UserRole { get; set; } = "Customer";

    [Parameter]
    public bool CanEditOrders { get; set; } = false;

    [Parameter]
    public bool CanCancelOrders { get; set; } = false;

    [Parameter]
    public bool CanViewChat { get; set; } = false;

    private OrderDto? SelectedOrder { get; set; }

    private bool IsViewModalVisible = false;
    private bool IsManageModalVisible = false;

    private List<OrderDto> Orders = new();

    private int Page = 1;
    private const int PageSize = 10;

    private string SearchText = string.Empty;
    private string? SelectedStatus;
    private string SortColumn = nameof(OrderDto.CreatedAt);
    private bool SortAscending = false;

    private bool IsLoading = true;

    private IEnumerable<OrderDto> FilteredOrders
    {
        get
        {
            return Orders
                .Where(o => string.IsNullOrWhiteSpace(SearchText)
                    || (o.Product is not null && o.Product.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
                    || GetOtherUserName(o).Contains(SearchText, StringComparison.OrdinalIgnoreCase))
                .Where(o => string.IsNullOrWhiteSpace(SelectedStatus) || o.Status == SelectedStatus)
                .OrderByDynamic(SortColumn, SortAscending);
        }
    }

    private IEnumerable<OrderDto> PagedOrders
    {
        get
        {
            return FilteredOrders
                .Skip((Page - 1) * PageSize)
                .Take(PageSize);
        }
    }

    private int ColSpanCount
    {
        get
        {
            return Columns.Count + 1 + ((CanEditOrders || CanCancelOrders) ? 1 : 0);
        }
    }

    private List<(string Title, string Property)> Columns = new()
    {
        ("Customer", nameof(OrderDto.CustomerDisplayName)),
        ("Product", nameof(OrderDto.ProductDisplayName)),
        ("Status", nameof(OrderDto.Status)),
        ("Quantity", nameof(OrderDto.Quantity)),
        ("Price", nameof(OrderDto.Price)),
        ("Created", nameof(OrderDto.CreatedAt)),
    };

    private List<string> Statuses = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchOrders();

        Statuses = Orders
            .Select(o => o.Status)
            .Distinct()
            .ToList();

        await ConnectSignalR();
    }

    protected override void OnParametersSet()
    {
        Columns = new List<(string Title, string Property)>();

        if (UserRole == "Seller")
        {
            Columns.Add(("Customer", nameof(OrderDto.CustomerDisplayName)));
        }
        else
        {
            Columns.Add(("Seller", nameof(OrderDto.ProductOwnerDisplayName)));
        }

        Columns.AddRange(new List<(string Title, string Property)>
        {
            ("Product", nameof(OrderDto.ProductDisplayName)),
            ("Status", nameof(OrderDto.Status)),
            ("Quantity", nameof(OrderDto.Quantity)),
            ("Price", nameof(OrderDto.Price)),
            ("Created", nameof(OrderDto.CreatedAt)),
        });
    }

    private async Task FetchOrders()
    {
        IsLoading = true;

        if (UserRole == "Seller")
        {
            Orders = await _OrderService.GetReceivedOrdersAsync();
        }
        else
        {
            Orders = await _OrderService.GetPlacedOrdersAsync();
        }

        IsLoading = false;
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        // Reset page number and set search text

        Page = 1;

        SearchText = e.Value?.ToString() ?? string.Empty;
    }

    private void OnStatusInput(ChangeEventArgs e)
    {
        // Reset page number and set selected status

        Page = 1;

        SelectedStatus = e.Value?.ToString() ?? string.Empty;
    }

    private string GetOtherUserName(OrderDto order)
    {
        if (UserRole == "Seller")
        {
            return order.CustomerDisplayName;
        }
        else
        {
            return order.ProductOwnerDisplayName;
        }
    }

    private void NavigateToChat(OrderDto order)
    {
        _NavigationManager.NavigateTo($"/dashboard/chats/order/{order.PublicId}");
    }

    private string GetColumnClass(string columnName)
    {
        return columnName switch
        {
            nameof(OrderDto.PublicId) => "public-id",
            nameof(OrderDto.Status) => "status",
            nameof(OrderDto.Quantity) => "quantity",
            nameof(OrderDto.Price) => "price",
            nameof(OrderDto.CreatedAt) => "created-at",
            "Product.Name" => "product-name",
            "Customer.Name" => "customer-name",
            _ => "auto"
        };
    }

    private bool DisplayActionsColumn()
    {
        return CanEditOrders || CanCancelOrders || CanViewChat;
    }

    // ***** Sorting ***** //

    private string GetSortClass(string columnName)
    {
        if (columnName != SortColumn)
            return string.Empty;

        return SortAscending ? "sort-asc" : "sort-desc";
    }

    string GetSortIndicator(string column)
    {
        if (SortColumn != column) return "";
        return SortAscending ? "▲" : "▼";
    }

    private void SortBy(string column)
    {
        if (SortColumn == column)
            SortAscending = !SortAscending;
        else
        {
            SortColumn = column;
            SortAscending = true;
        }
    }

    // ***** Paging ***** //

    private bool IsFirstPage
    {
        get
        {
            return Page <= 1;
        }
    }

    private bool IsLastPage
    {
        get
        {
            return Page >= TotalPages;
        }
    }

    private int TotalPages
    {
        get
        {
            return (int)Math.Ceiling((double)FilteredOrders.Count() / PageSize);
        }
    }

    private void NextPage()
    {
        if (!IsLastPage)
        {
            Page++;
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            Page--;
        }
    }

    // ***** SignalR ***** //

    private HubConnection? _HubConnection;

    private async Task ConnectSignalR()
    {
        _HubConnection = new HubConnectionBuilder()
            .WithUrl(_NavigationManager.ToAbsoluteUri("/orderhub"))
            .WithAutomaticReconnect()
            .Build();

        _HubConnection.On<OrderDto>("OrderCreated", order =>
        {
            // Add this order to the table if it doesn't exist

            if (!Orders.Any(o => o.PublicId == order.PublicId))
            {
                Orders.Insert(0, order);

                StateHasChanged();
            }
        });

        _HubConnection.On<OrderDto>("OrderUpdated", order =>
        {
            // Update the order (this assumes it's already in the table)

            int index = Orders.FindIndex(o => o.PublicId == order.PublicId);

            if (index >= 0)
            {
                Orders[index] = order;

                StateHasChanged();
            }
        });

        _HubConnection.On<string>("OrderDeleted", orderPublicId =>
        {
            // Delete the order from the table if it exists

            OrderDto? order = Orders.FirstOrDefault(o => o.PublicId == orderPublicId);

            if (order is not null)
            {
                Orders.Remove(order);

                StateHasChanged();
            }
        });

        await _HubConnection.StartAsync();
    }

    // ***** View Order Modal ***** //

    private void OpenViewModal(OrderDto order)
    {
        SelectedOrder = order;
        IsViewModalVisible = true;
    }

    private void CloseViewModal()
    {
        SelectedOrder = null;
        IsViewModalVisible = false;
    }

    // ***** Manage Order Modal ***** //

    private void OpenManageModal(OrderDto order)
    {
        SelectedOrder = order;
        IsManageModalVisible = true;
    }

    private void CloseManageModal()
    {
        SelectedOrder = null;
        IsManageModalVisible = false;
    }

    // ***** Misc ***** //

    public async ValueTask DisposeAsync()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.StopAsync();
            await _HubConnection.DisposeAsync();
        }
    }

    // ***** Injects ***** //

    [Inject]
    private OrderService _OrderService { get; set; }

    [Inject]
    private NavigationManager _NavigationManager { get; set; }
}
