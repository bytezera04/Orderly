
@using Orderly.Client.Components
@using Orderly.Client.Pages.Shared
@using Orderly.Client.Services
@using Orderly.Shared.Dtos
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Authorization

@page "/dashboard/overview"
@namespace Orderly.Client.Pages.Dashboard
@layout DashboardLayout

@attribute [Authorize]

<PageTitle>Overview - Orderly</PageTitle>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/apexcharts@3.48.0/dist/apexcharts.css" />

<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>

@if (CurrentUser is null || LoadingProducts || LoadingOrders)
{
    @*
        Load Skeletons
    *@

    <div class="overview-container mt-16 mx-auto px-2 sm:px-4 md:px-6 lg:px-8 max-w-screen-xl space-y-6">
        <div class="h-10 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/3"></div>

        <!-- Stats Cards Skeleton -->

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            @for (int i = 0; i < 3; i++)
            {
                <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-6 flex flex-col space-y-3">
                    <div class="h-5 bg-lightbg/50 dark:bg-darkbg/50 rounded w-2/3"></div>
                    <div class="h-8 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/2"></div>
                </div>
            }
        </div>

        <!-- Data Cards Skeletons -->

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">

            <!-- Most Popular Products Skeleton -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-6 flex flex-col space-y-4">
                <div class="h-5 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/2"></div>
                @for (int j = 0; j < 5; j++)
                {
                    <div class="flex justify-between items-center p-3 bg-lightbg/20 dark:bg-darkbg/20 rounded-lg">
                        <div class="h-4 bg-lightbg/50 dark:bg-darkbg/50 rounded w-2/3"></div>
                        <div class="h-4 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/4"></div>
                    </div>
                }
            </div>

            <!-- Sales Chart Skeleton -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-4 sm:p-6 flex flex-col w-full max-w-full">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-2">
                    <div class="h-5 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/3 mb-2 sm:mb-0"></div>
                    <div class="h-8 bg-lightbg/50 dark:bg-darkbg/50 rounded w-24"></div>
                </div>
                <div class="h-64 sm:h-80 bg-lightbg/20 dark:bg-darkbg/20 rounded"></div>
            </div>

            <!-- Most Recent Orders Skeleton -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-4 md:p-6 flex flex-col space-y-4">
                <div class="h-5 md:h-6 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/3"></div>
                @for (int j = 0; j < 5; j++)
                {
                    <div class="flex flex-col md:flex-row justify-between items-start md:items-center p-3 bg-lightbg/20 dark:bg-darkbg/20 rounded-lg">
                        <div class="h-4 bg-lightbg/50 dark:bg-darkbg/50 rounded w-full md:w-2/3 mb-1 md:mb-0"></div>
                        <div class="h-4 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/4"></div>
                    </div>
                }
            </div>

            <!-- Top Customers Skeleton -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-6 flex flex-col space-y-4">
                <div class="h-5 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/3"></div>
                @for (int j = 0; j < 5; j++)
                {
                    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center p-3 bg-lightbg/20 dark:bg-darkbg/20 rounded-lg min-w-0">
                        <div class="h-4 bg-lightbg/50 dark:bg-darkbg/50 rounded w-full sm:w-1/3 mb-1 sm:mb-0"></div>
                        <div class="h-4 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/6 mb-1 sm:mb-0 hidden sm:block"></div>
                        <div class="h-4 bg-lightbg/50 dark:bg-darkbg/50 rounded w-1/4"></div>
                    </div>
                }
            </div>
        </div>
    </div>
}
else
{
    <div class="overview-container mt-16 mx-auto px-2 sm:px-4 md:px-6 lg:px-8 max-w-screen-xl space-y-6">
        <h1 class="text-3xl font-bold mb-6 text-lightfg dark:text-darkfg">Dashboard Overview</h1>

        @*
            Stat Cards
        *@

        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            <!-- Total Orders Received -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-6 flex flex-col">
                <h2 class="text-lg font-semibold mb-2 text-lightfg dark:text-darkfg">Total Orders Received</h2>
                <p class="text-3xl font-bold text-primary">@ReceivedOrders.Count</p>
            </div>

            <!-- Pending Orders -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-6 flex flex-col">
                <h2 class="text-lg font-semibold mb-2 text-lightfg dark:text-darkfg">Pending Orders Received</h2>
                <p class="text-3xl font-bold text-primary">@PendingReceivedOrders.Count</p>
            </div>

            <!-- All Time Revenue -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-6 flex flex-col">
                <h2 class="text-lg font-semibold mb-2 text-lightfg dark:text-darkfg">All Time Revenue</h2>
                <p class="text-3xl font-bold text-money">£@AllTimeRevenue</p>
            </div>
        </div>

        @*
            Data Cards
        *@

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
            <!-- Most Popular Products -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-6 flex flex-col">
                <h2 class="text-lg font-semibold mb-4 text-lightfg dark:text-darkfg">Most Popular Products</h2>

                @if (!MostPopularProducts.Any())
                {
                    <p class="text-lightfg dark:text-darkfg">No products available.</p>
                }
                else
                {
                    <!-- Headers (hidden on smaller screens) -->

                    <div class="hidden md:flex justify-between px-3 py-2 font-semibold text-sm text-lightfg dark:text-darkfg border-b border-lightborder dark:border-darkborder">
                        <span class="flex-1">Product</span>
                        <span class="flex-1 text-right">Orders</span>
                    </div>

                    <ul class="space-y-2 mt-2">
                        @foreach (var product in MostPopularProducts.Take(5))
                        {
                            <li class="flex justify-between items-center p-3 bg-lightbg/10 dark:bg-darkbg/10 rounded-lg shadow-sm
                               hover:shadow-md hover:bg-lightbg/20 dark:hover:bg-darkbg/20 transition cursor-pointer"
                                @onclick="() => OpenProductViewModal(product)">

                                <span class="font-medium text-lightfg dark:text-darkfg">@product.Name</span>
                                <span class="font-semibold text-primary">@product.Sales</span>
                            </li>
                        }
                    </ul>
                }
            </div>

            <!-- Sales Chart -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-4 sm:p-6 flex flex-col w-full max-w-full">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 gap-2">
                    <h2 class="text-lg font-semibold text-lightfg dark:text-darkfg">Sales Over Time</h2>

                    <!-- Dropdown for all screen sizes -->

                    <select class="p-2 rounded-md bg-lightcard dark:bg-darkcard text-lightfg dark:text-darkfg border border-lightborder dark:border-darkborder"
                            @onchange="async e => await SetDateRange(e.Value?.ToString()!)"
                            value="@SelectedDateRange">
                        @foreach (var range in DateRanges)
                        {
                            <option value="@range">@range</option>
                        }
                    </select>
                </div>

                @if (!ReceivedOrders.Any())
                {
                    <p class="text-lightfg dark:text-darkfg">No sales data available.</p>
                }
                else
                {
                    <div class="flex-grow-1 p-2 sm:p-3">
                        <div id="salesChart" class="dashboard-chart w-full h-64 sm:h-80"></div>
                    </div>
                }
            </div>

            <!-- Most Recent Orders -->

            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-4 md:p-6 flex flex-col">
                <h2 class="text-lg md:text-xl font-semibold mb-4 text-lightfg dark:text-darkfg">Most Recent Orders</h2>

                @if (!MostRecentOrders.Any())
                {
                    <p class="text-lightfg dark:text-darkfg">No orders available.</p>
                }
                else
                {
                    <!-- Headers (hidden on smaller screens) -->

                    <div class="hidden md:flex justify-between px-3 py-2 font-semibold text-sm text-lightfg dark:text-darkfg border-b border-lightborder dark:border-darkborder">
                        <span class="flex-1">Product</span>
                        <span class="flex-1 text-right">Price</span>
                    </div>

                    <ul class="space-y-2 mt-2">
                        @foreach (var order in MostRecentOrders.Take(5))
                        {
                            <li class="flex flex-col md:flex-row justify-between items-start md:items-center p-3
                               bg-lightbg/10 dark:bg-darkbg/10 rounded-lg shadow-sm
                               hover:shadow-md hover:bg-lightbg/20 dark:hover:bg-darkbg/20 transition cursor-pointer"
                                @onclick="() => OpenOrderViewModal(order)">

                                <!-- Product Name -->
                                <span class="flex-1 font-medium text-lightfg dark:text-darkfg mb-1 md:mb-0">
                                    @order.ProductDisplayName
                                </span>

                                <!-- Price -->
                                <span class="flex-1 text-right">
                                    <span class="font-semibold text-green-500 dark:text-green-400">£@order.Price</span>
                                </span>
                            </li>
                        }
                    </ul>
                }
            </div>

            <!-- Top Customers -->
            <div class="bg-lightcard dark:bg-darkcard rounded-xl shadow p-6 flex flex-col">
                <h2 class="text-lg font-semibold mb-4 text-lightfg dark:text-darkfg">Top Customers</h2>

                @if (!TopCustomers.Any())
                {
                    <p class="text-lightfg dark:text-darkfg">No customer data available.</p>
                }
                else
                {
                    <!-- Headers -->
                    <div class="hidden sm:flex justify-between px-3 py-2 font-semibold text-sm text-lightfg dark:text-darkfg border-b border-lightborder dark:border-darkborder">
                        <span class="flex-1">Customer</span>
                        <span class="flex-1 text-center">Orders</span>
                        <span class="flex-1 text-right">Spent</span>
                    </div>

                    <ul class="space-y-2 mt-2">
                        @foreach (var customer in TopCustomers.Take(5))
                        {
                            <li class="flex flex-col sm:flex-row justify-between items-start sm:items-center p-3 bg-lightbg/10 dark:bg-darkbg/10 rounded-lg shadow-sm hover:shadow-md transition min-w-0">
                                <!-- Customer Name -->
                                <span class="flex-1 font-medium text-lightfg dark:text-darkfg truncate">@customer.Name</span>

                                <!-- Total Orders (hidden on mobile) -->
                                <span class="flex-1 text-center text-primary hidden sm:inline">@customer.TotalOrders</span>

                                <!-- Total Spent -->
                                <span class="flex-1 text-right text-lightfg dark:text-darkfg mt-1 sm:mt-0">
                                    <span class="font-semibold text-green-500 dark:text-green-400">£@customer.TotalSpent</span>
                                </span>
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>
    </div>
}

<script>
    window.renderSalesChart = function (salesData, xMin, xMax, theme) {
        var isDark = theme === 'dark';

        var options = {
            chart: {
                type: 'line',
                height: 300,
                zoom: { enabled: true },
                toolbar: { show: true }
            },
            series: [{
                name: 'Revenue',
                data: salesData
            }],
            xaxis: {
                type: 'datetime',
                min: xMin,
                max: xMax
            },
            tooltip: {
                enabled: true,
                theme: isDark ? 'dark' : 'light',
                y: {
                    formatter: function (value, { dataPointIndex, w }) {
                        var orders = w.config.series[0].data[dataPointIndex].orders;
                        return `£${value.toFixed(2)}\nOrders: ${orders}`;
                    }
                }
            },
            stroke: { curve: 'smooth' },
            markers: { size: 5 },
            grid: { borderColor: isDark ? '#333' : '#e0e0e0' }
        };

        var chartDiv = document.querySelector("#salesChart");
        chartDiv.innerHTML = ''; // clear existing chart
        var chart = new ApexCharts(chartDiv, options);
        chart.render();
    };
</script>

<!-- Product View Modal -->

<ProductViewModal IsVisible="@IsProductViewModalVisible"
                  ProductToView="@SelectedProduct"
                  OnClose="@CloseProductViewModal" />

<!-- Order View Modal -->

<OrderViewModal IsVisible="@IsOrderViewModalVisible"
                OrderToView="@SelectedOrder"
                OnClose="@CloseOrderViewModal" />

@code {
    private UserDto? CurrentUser;

    private List<ProductDto> Products = new();

    private List<OrderDto> PlacedOrders = new();
    private List<OrderDto> ReceivedOrders = new();

    private bool LoadingProducts = true;
    private bool LoadingOrders = true;

    protected override async Task OnInitializedAsync()
    {
        // Load the initial data

        LoadingProducts = true;
        LoadingOrders = true;

        await Task.Delay(200); // Make skeleton transition look natural

        CurrentUser = await _UserService.GetCurrentUser();

        Products = await _ProductService.GetProductsAsync();

        PlacedOrders = await _OrderService.GetPlacedOrdersAsync();
        ReceivedOrders = await _OrderService.GetReceivedOrdersAsync();

        LoadingProducts = false;
        LoadingOrders = false;

        StateHasChanged(); // required

        // Build the sales data

        await BuildSalesData();

        await RenderSalesChart();

        // Build the customer summary

        BuildCustomerSummary();

        // Connect with SignalR

        //await ConnectSignalR();
    }

    // ***** Stats ***** //

    private List<ProductDto> MostPopularProducts
    {
        get
        {
            return Products
                .OrderByDescending(p => p.Sales)
                .ToList();
        }
    }

    private List<OrderDto> MostRecentOrders
    {
        get
        {
            return ReceivedOrders
                .OrderByDescending(o => o.CreatedAt)
                .ToList();
        }
    }

    private List<OrderDto> PendingReceivedOrders
    {
        get
        {
            return ReceivedOrders
                .Where(o => o.Status == "Pending" || o.Status == "Processing")
                .ToList();
        }
    }

    private decimal AllTimeRevenue
    {
        get
        {
            return ReceivedOrders
                .Sum(o => o.Price);
        }
    }

    // ***** Chart UI ***** //

    private readonly List<string> DateRanges = new()
    {
        "24h",
        "7d",
        "1m",
        "3m",
        "6m",
        "1y",
        "All Time"
    };

    private string SelectedDateRange = "1m";

    private decimal TotalRevenue;

    private List<SalesPoint> SalesData = new();

    private bool IsSalesDataLoading = true;

    private async Task BuildSalesData()
    {
        IsSalesDataLoading = true;

        DateTime firstOrderTime = ReceivedOrders
            .OrderBy(o => o.CreatedAt)
            .Select(o => o.CreatedAt)
            .FirstOrDefault();

        DateTime now = DateTime.UtcNow;
        DateTime startDate = SelectedDateRange switch
        {
            "24h" => now.AddDays(-1),
            "7d" => now.AddDays(-7),
            "1m" => now.AddMonths(-1),
            "3m" => now.AddMonths(-3),
            "6m" => now.AddMonths(-6),
            "1y" => now.AddYears(-1),
            _ => firstOrderTime
        };

        var filteredOrders = ReceivedOrders
            .Where(o => o.CreatedAt >= startDate)
            .OrderBy(o => o.CreatedAt)
            .ToList();

        BuildSalesDataBuckets(startDate, now, SelectedDateRange, filteredOrders);

        IsSalesDataLoading = false;
    }

    private void BuildSalesDataBuckets(DateTime start, DateTime end, string range, List<OrderDto> orders)
    {
        SalesData = range switch
        {
            "24h" => GroupByBuckets(orders, start, end, 24, o => o.CreatedAt.Date.AddHours(o.CreatedAt.Hour)),
            "7d" => GroupByBuckets(orders, start, end, 7, o => o.CreatedAt.Date),
            "1m" => GroupByBuckets(orders, start, end, 10, o =>
            {
                int bucketIndex = (o.CreatedAt.Date - start.Date).Days / 3;
                return start.Date.AddDays(bucketIndex * 3);
            }),
            _ => GroupByBuckets(orders, start, end, 12, o => new DateTime(o.CreatedAt.Year, o.CreatedAt.Month, 1))
        };
    }

    private List<SalesPoint> GroupByBuckets(List<OrderDto> orders, DateTime start, DateTime end, int buckets, Func<OrderDto, DateTime> keySelector)
    {
        var bucketList = new List<SalesPoint>(buckets);
        TimeSpan span = end - start;
        long ticksPerBucket = span.Ticks / buckets;

        for (int i = 0; i < buckets; i++)
        {
            var bucketStart = start.AddTicks(ticksPerBucket * i);
            var bucketEnd = (i == buckets - 1) ? end : start.AddTicks(ticksPerBucket * (i + 1));

            var bucketOrders = orders.Where(o =>
            {
                var key = keySelector(o);
                return key >= bucketStart && key < bucketEnd;
            }).ToList();

            bucketList.Add(new SalesPoint
            {
                X = bucketStart,
                Y = bucketOrders.Sum(o => o.Price * o.Quantity),
                Orders = bucketOrders.Count
            });
        }

        return bucketList;
    }

    private async Task RenderSalesChart()
    {
        if (!SalesData.Any())
            return;

        var xMin = new DateTimeOffset(SalesData.Min(sp => sp.X)).ToUnixTimeMilliseconds();
        var xMax = new DateTimeOffset(SalesData.Max(sp => sp.X)).ToUnixTimeMilliseconds();

        await JS.InvokeVoidAsync("renderSalesChart", SalesData.Select(sp => new
        {
            x = sp.X.ToString("o"),
            y = sp.Y,
            orders = sp.Orders
        }), xMin, xMax, "dark"); // replace "dark" with actual theme if needed
    }

    private async Task SetDateRange(string range)
    {
        SelectedDateRange = range;

        await BuildSalesData();
        await RenderSalesChart();

        StateHasChanged();
    }

    public class SalesPoint
    {
        public DateTime X { get; set; }
        public decimal Y { get; set; }
        public int Orders { get; set; }
    }

    // ***** Customer Summary ***** //

    private List<CustomerSummary> CustomerSummaries { get; set; } = new();

    private const int TOP_CUSTOMERS_PREVIEW_COUNT = 5;

    private List<CustomerSummary> TopCustomers
    {
        get
        {
            return CustomerSummaries
                .OrderByDescending(cs => cs.TotalSpent)
                .Take(TOP_CUSTOMERS_PREVIEW_COUNT)
                .ToList();
        }
    }

    private void BuildCustomerSummary()
    {
        CustomerSummaries.Clear();

        CustomerSummaries = ReceivedOrders
            .Where(o => o.Customer is not null)
            .GroupBy(o => o.CustomerDisplayName)
            .Select(g => new CustomerSummary
            {
                Name = g.Key,
                TotalOrders = g.Count(),
                TotalSpent = g.Sum(o => o.Price)
            })
            .ToList();
    }

    public class CustomerSummary
    {
        public string Name { get; set; } = string.Empty;

        public int TotalOrders { get; set; } = 0;

        public decimal TotalSpent { get; set; } = 0;
    }

    /* ===== Modals ===== */

    private ProductDto? SelectedProduct;
    private OrderDto? SelectedOrder;

    private bool IsProductViewModalVisible = false;
    private bool IsOrderViewModalVisible = false;

    private void OpenProductViewModal(ProductDto product)
    {
        SelectedProduct = product;
        IsProductViewModalVisible = true;
    }

    private void CloseProductViewModal()
    {
        SelectedProduct = null;
        IsProductViewModalVisible = false;
    }

    private void OpenOrderViewModal(OrderDto order)
    {
        SelectedOrder = order;
        IsOrderViewModalVisible = true;
    }

    private void CloseOrderViewModal()
    {
        SelectedOrder = null;
        IsOrderViewModalVisible = false;
    }

    // ***** Injects ***** //

    [Inject]
    private UserService _UserService { get; set; }

    [Inject]
    private ProductService _ProductService { get; set; }

    [Inject]
    private OrderService _OrderService { get; set; }

    [Inject]
    private NavigationManager _NavigationManager { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }
}
