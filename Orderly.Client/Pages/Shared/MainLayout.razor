
@inherits LayoutComponentBase

@namespace Orderly.Client.Pages.Shared

<div class="main-layout min-h-screen flex flex-col">
    @*
        Navbar
    *@

    <nav class="w-full bg-lightcard dark:bg-darkcard shadow-md fixed top-0 left-0 z-50">
        <div class="flex items-center h-16 px-4">
            <!-- Logo -->

            <div class="flex items-center">
                <a href="/" class="text-2xl font-bold text-primary dark:text-primary">
                    Orderly
                </a>
            </div>

            <!-- Links -->

            <div class="flex-1">
                <div class="hidden md:flex justify-center max-w-6xl mx-auto space-x-8">
                    @foreach (Nav nav in Navs)
                    {
                        <NavLink href="@nav.Path"
                                 class="@($"relative font-medium text-lightfg dark:text-darkfg transition duration-300 hover:text-primary dark:hover:text-primary {(IsNavActive(nav) ? "text-primary dark:text-primary" : "")}")">
                            @nav.Title
                            <span class="absolute left-0 -bottom-1 w-full h-0.5 bg-primary dark:bg-primary scale-x-0 transition-transform duration-300 hover:scale-x-100 @(IsNavActive(nav) ? "scale-x-100" : "")"></span>
                        </NavLink>
                    }
                </div>
            </div>

            <!-- Theme Toggle -->

            <div class="flex items-center space-x-4">
                <button class="p-2 rounded-md hover:bg-lightcard/20 dark:hover:bg-darkcard/20 transition-colors duration-200"
                        @onclick="ToggleTheme">

                    @if (IsDarkMode)
                    {
                        <i class="bi bi-sun-fill text-yellow-400 text-2xl"></i>
                    }
                    else
                    {
                        <i class="bi bi-moon-fill text-gray-900 text-2xl"></i>
                    }
                </button>

                <button id="mobile-menu-btn" class="md:hidden p-2 rounded-lg transition bg-lightbg/10 dark:bg-darkbg/10 hover:bg-lightbg/20 dark:hover:bg-darkbg/20 text-lightfg dark:text-darkfg"
                        @onclick="ToggleMobileMenu">
                    <i class="bi @(IsMobileMenuOpen ? "bi-x" : "bi-list") text-2xl"></i>
                </button>
            </div>
        </div>

        @* Mobile Nav Links *@

        <div id="mobile-menu" class="@($"md:hidden mt-2 mb-2 space-y-2 flex flex-col {(IsMobileMenuOpen ? "" : "hidden")}")">
            @foreach (Nav nav in Navs)
            {
                <NavLink href="@nav.Path"
                         class="@($"block px-4 py-2 rounded-lg font-medium text-lightfg dark:text-darkfg hover:bg-lightbg/20 dark:hover:bg-darkbg/20 transition {(IsNavActive(nav) ? "bg-lightbg/20 dark:bg-darkbg/20" : "")}")">
                    @nav.Title
                </NavLink>
            }
        </div>
    </nav>

    @*
        Page Content
    *@

    <!-- Wrap to immediately apply bg colours, prevents a flash -->

    <div class="min-h-screen bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg">
        @if (IsPageInDashboard)
        {
            <!-- Full page content -->

            <div class="flex flex-1">
                @Body
            </div>
        }
        else
        {
            <!-- This is the main content -->

            <main class="flex-1">
                @Body
            </main>
        }
    </div>

    @*
        Footer
    *@

    @if (ShowFooter)
    {
        <footer class="bg-lightcard dark:bg-darkcard text-lightfg dark:text-darkfg py-12">
            <div class="max-w-7xl mx-auto px-4 flex flex-col sm:flex-row justify-between items-center gap-8">
                @*
                    Logo
                *@

                <div class="text-center sm:text-left">
                    <h2 class="text-2xl font-bold text-primary dark:text-primary">Orderly</h2>
                    <p class="text-sm text-lightfg/80 dark:text-darkfg/80">
                        Modern marketplace solutions for digital products.
                    </p>
                </div>

                @*
                    Site Links
                *@

                <div class="flex flex-wrap justify-center gap-6">
                    @foreach (Nav nav in Navs)
                    {
                        <NavLink href="@nav.Path" class="hover:text-primary dark:hover:text-primary transition">
                            @nav.Title
                    </NavLink>
                }
                </div>

                @*
                    GitHub Icon
                *@

                <div class="flex justify-center sm:justify-end">
                    <a href="https://github.com/bytezera04/Orderly" target="_blank"
                       class="hover:text-primary dark:hover:text-primary transition">
                        <i class="bi bi-github text-2xl"></i>
                    </a>
                </div>
            </div>
        </footer>
    }
</div>

@code {
    private bool ShowFooter
    {
        get
        {
            return !IsPageInDashboard;
        }
    }

    private bool IsPageInDashboard
    {
        get
        {
            return _NavigationManager.Uri.Contains("/Dashboard", StringComparison.OrdinalIgnoreCase);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Read the stored theme

        string storedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "theme");

        if (storedTheme == "dark")
        {
            IsDarkMode = true;
            await JS.InvokeVoidAsync("document.documentElement.classList.add", "dark");
        }
        else if (storedTheme == "light")
        {
            IsDarkMode = false;
            await JS.InvokeVoidAsync("document.documentElement.classList.remove", "dark");
        }
    }

    // ***** Themes ***** //

    private bool IsDarkMode = true;

    private async Task ToggleTheme()
    {
        IsDarkMode = !IsDarkMode;

        // Apply changes and set the local storage value

        if (IsDarkMode)
        {
            await JS.InvokeVoidAsync("document.documentElement.classList.add", "dark");
            await JS.InvokeVoidAsync("localStorage.setItem", "theme", "dark");
        }
        else
        {
            await JS.InvokeVoidAsync("document.documentElement.classList.remove", "dark");
            await JS.InvokeVoidAsync("localStorage.setItem", "theme", "light");
        }
    }

    // ***** Mobile Navbar ***** //

    private bool IsMobileMenuOpen = false;

    private void ToggleMobileMenu()
    {
        IsMobileMenuOpen = !IsMobileMenuOpen;
    }

    // ***** Navlinks ***** //

    public class Nav
    {
        public string Title { get; set; } = string.Empty;
        public string Path { get; set; } = string.Empty;
    }

    private readonly List<Nav> Navs = new List<Nav>
    {
        new Nav
        {
            Title = "Home",
            Path = "/"
        },
        new Nav
        {
            Title = "Dashboard",
            Path = "/dashboard/overview"
        },
        new Nav
        {
            Title = "Marketplace",
            Path = "/marketplace"
        },
        new Nav
        {
            Title = "Privacy",
            Path = "/privacy"
        }
    };

    private bool IsNavActive(Nav nav)
    {
        if (IsPageInDashboard && nav.Path.Contains("dashboard", StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return _NavigationManager.Uri.EndsWith(nav.Path, StringComparison.OrdinalIgnoreCase);
    }

    // ***** Injects ***** //

    [Inject]
    private NavigationManager _NavigationManager { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }
}
