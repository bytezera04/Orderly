@using Orderly.Client.Services
@using Orderly.Shared.Dtos

@namespace Orderly.Client.Components

<link href="https://cdn.jsdelivr.net/npm/@@yaireo/tagify/dist/tagify.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/@@yaireo/tagify"></script>

@if (IsVisible)
{
    <div class="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
        <div class="bg-lightcard dark:bg-darkcard rounded-2xl shadow-2xl w-full max-w-2xl p-6 mx-4 relative">
            @*
                Header
            *@

            <div class="flex justify-between items-center mb-6">
                <!-- Title -->

                <h3 class="text-2xl font-bold text-primary">Create New Product</h3>

                <!-- Close Button -->

                <button class="text-gray-400 hover:text-red-500 transition"
                        @onclick="OnCancelClicked">
                    ✕
                </button>
            </div>

            @*
                Messages
            *@

            <!-- Errors -->

            @if (ErrorMessages is not null && ErrorMessages.Any())
            {
                <div class="mb-4 p-3 rounded-lg bg-red-500/10 border border-red-500 text-red-500 text-sm">
                    <ul class="list-disc pl-4">
                        @foreach (var error in ErrorMessages)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </div>
            }

            @*
                Form
            *@

            <div class="space-y-5">
                <!-- Name -->

                <div>
                    <label class="block font-medium text-sm text-lightfg dark:text-darkfg mb-1">Name</label>
                    <input type="text"
                           class="w-full rounded-lg border border-gray-300 dark:border-gray-600 p-2 bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg focus:outline-none focus:ring-2 focus:ring-primary"
                           @bind="NewProduct.Name" />
                </div>

                <!-- Description -->

                <div>
                    <label class="block font-medium text-sm text-lightfg dark:text-darkfg mb-1">Description</label>
                    <textarea rows="4"
                              class="w-full rounded-lg border border-gray-300 dark:border-gray-600 p-2 bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg focus:outline-none focus:ring-2 focus:ring-primary resize-none"
                              @bind="NewProduct.Description"></textarea>
                </div>

                <!-- Category -->

                <div>
                    <label class="block font-medium text-sm text-lightfg dark:text-darkfg mb-1">Category</label>
                    <select class="w-full rounded-lg border border-gray-300 dark:border-gray-600 p-2 bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg focus:outline-none focus:ring-2 focus:ring-primary"
                            @bind="NewProduct.Category">
                        @foreach (var category in CategoryOptions)
                        {
                            <option value="@category">@category</option>
                        }
                    </select>
                </div>

                <!-- Price & Stock -->

                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block font-medium text-sm text-lightfg dark:text-darkfg mb-1">Price</label>
                        <div class="flex items-center rounded-lg border border-gray-300 dark:border-gray-600 bg-lightbg dark:bg-darkbg focus-within:ring-2 focus-within:ring-primary">
                            <span class="px-2 text-gray-500">£</span>
                            <input type="number" step="0.01"
                                   class="flex-1 rounded-r-lg p-2 bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg focus:outline-none"
                                   @bind="NewProduct.Price" />
                        </div>
                    </div>
                    <div>
                        <label class="block font-medium text-sm text-lightfg dark:text-darkfg mb-1">Stock</label>
                        <input type="number" min="0"
                               class="w-full rounded-lg border border-gray-300 dark:border-gray-600 p-2 bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg focus:outline-none focus:ring-2 focus:ring-primary"
                               @bind="NewProduct.Stock" />
                    </div>
                </div>

                <!-- Tags -->

                <div>
                    <label class="block font-medium text-sm text-lightfg dark:text-darkfg mb-1">Tags</label>
                    <input id="tagsInput"
                           type="text"
                           class="w-full rounded-lg border border-gray-300 dark:border-gray-600 p-2 bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg" />
                    <p class="text-xs text-gray-400 mt-1">Up to @MAX_TAGS tags allowed.</p>
                </div>
            </div>

            @*
                Actions
            *@

            <div class="flex justify-end gap-3 mt-8">
                <!-- Cancel Button -->

                <button class="px-4 py-2 rounded-lg bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600 transition"
                        @onclick="OnCancelClicked">
                    Cancel
                </button>

                <!-- Create Button -->

                <button class="px-4 py-2 rounded-lg bg-primary text-white font-semibold hover:bg-primary/90 transition"
                        @onclick="OnCreateClicked">
                    Create Product
                </button>
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnCreate { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    private ProductDto NewProduct = new();

    private readonly List<string> CategoryOptions = new()
    {
        "Electronics",
        "Clothing",
        "Books",
        "Toys",
        "Home"
    };

    private List<string>? ErrorMessages;

    private const int MAX_TAGS = 20;

    [JSInvokable]
    public void UpdateTags(string[] tags)
    {
        NewProduct.Tags = tags
            .Distinct()
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            // Initialize tagify

            await JS.InvokeVoidAsync("tagifyInterop.init", "tagsInput", NewProduct.Tags, MAX_TAGS);

            // Initialize currency formatter

            await JS.InvokeVoidAsync("initCurrencyFormatter");
        }
    }

    private async Task OnCreateClicked()
    {
        ErrorMessages = null;

        NewProduct.Tags = await JS.InvokeAsync<List<string>>("tagifyInterop.getTags", "tagsInput");

        // Create the product

        var (success, errors) = await _ProductService.CreateProductAsync(NewProduct);

        // Handle result status

        if (success)
        {
            // Let event listeners know this product was created

            await OnCreate.InvokeAsync();

            NewProduct = new();
        }
        else
        {
            ErrorMessages = errors;
        }
    }

    private async Task OnCancelClicked()
    {
        await OnCancel.InvokeAsync();

        NewProduct = new();
    }

    [Inject]
    private ProductService _ProductService { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }
}
