
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using Orderly.Client.Pages.Shared
@using Orderly.Client.Services
@using Orderly.Shared.Dtos
@using Orderly.Shared.Helpers

@page "/dashboard/chats"
@namespace Orderly.Client.Pages.Dashboard
@layout DashboardLayout

@attribute [Authorize]

<PageTitle>Chats - Orderly</PageTitle>

<div class="flex justify-center px-4 py-6 min-h-[calc(100svh-4rem)]">
    <div class="w-full max-w-3xl flex flex-col">
        @*
            Header
        *@

        <div class="flex flex-col sm:flex-row sm:items-center gap-2 px-0 sm:px-2 py-2">
            <!-- Search Input -->

            <input type="text"
                   placeholder="Search chats..."
                   class="w-full sm:flex-1 h-10 px-4 rounded-xl border border-lightcard dark:border-darkcard
                          bg-transparent text-lightfg dark:text-darkfg text-sm
                          focus:ring-2 focus:ring-primary focus:outline-none"
                   @bind="SearchText"
                   @bind:event="oninput" />

            <!-- Context Filter -->

            <select class="w-full sm:w-auto h-10 px-4 rounded-xl border border-lightcard dark:border-darkcard
                           bg-transparent text-lightfg dark:text-darkfg text-sm
                           focus:ring-2 focus:ring-primary focus:outline-none"
                    @bind="SelectedContextType"
                    @bind:event="oninput">

                <option value="">All</option>

                @foreach (var type in ContextTypes)
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>

        @*
            Chats
        *@

        <div class="flex-1 overflow-y-auto min-h-0 mt-2">
            @if (IsLoading)
            {
                @*
                    Loading
                *@

                <p class="text-gray-400 text-center mt-10">Loading...</p>
            }
            else if (!FilteredChats.Any())
            {
                @*
                    No Chats Found
                *@

                <p class="text-gray-400 text-center mt-10">No chats found</p>
            }
            else
            {
                @*
                    Chats
                *@

                <div class="flex flex-col gap-2">
                    @foreach (var chat in FilteredChats)
                    {
                        <div class="flex items-center justify-between px-4 py-3 rounded-xl border border-gray-300 cursor-pointer transition-colors"
                             @onclick="() => OpenChat(chat)">

                            <!-- Left: Participant info -->
                            <div class="flex items-center gap-3">
                                <div class="w-10 h-10 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center text-sm font-semibold text-gray-700 dark:text-gray-200">
                                    @GetInitials(chat.OtherParticipant?.FullName)
                                </div>

                                <div class="flex flex-col">
                                    <span class="text-sm font-medium text-lightfg dark:text-darkfg">
                                        @chat.OtherParticipant?.FullName
                                    </span>
                                    <span class="text-xs text-gray-500 dark:text-gray-400 truncate max-w-[200px]">
                                        @(chat.PreviewMessage?.Content ?? "No messages yet")
                                    </span>
                                </div>
                            </div>

                            <span class="text-xs text-gray-400 dark:text-gray-500">
                                @DateTimeHelper.ToShortTimeAgo(chat.LastActivityAt)
                            </span>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<ChatThreadPreviewDto> ChatPreviews = new();

    private string SearchText = string.Empty;

    private string SelectedContextType = string.Empty;

    private List<string> ContextTypes = new()
    {
        "Order"
    };

    private List<ChatThreadPreviewDto> FilteredChats
    {
        get
        {
            return ChatPreviews
                .Where(cp => cp.OtherParticipant is not null && cp.ChatThread is not null)
                .Where(cp => string.IsNullOrWhiteSpace(SearchText) || cp.OtherParticipant!.FullName.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
                .Where(cp => string.IsNullOrWhiteSpace(SelectedContextType) || cp.ChatThread!.ContextType.Equals(SelectedContextType, StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(cp => cp.LastActivityAt)
                .ToList();
        }
    }

    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        ChatPreviews = await _ChatService.GetChatPreviews() ?? new();

        IsLoading = false;

        // Connect to SignalR

        await ConnectSignalR();
    }

    private void OpenChat(ChatThreadPreviewDto preview)
    {
        // Exit if no context public ID exists

        if (preview.ContextPublicId is null)
        {
            return;
        }

        // Open order chat

        if (preview.ChatThread?.ContextType == "Order")
        {
            _NavigationManager.NavigateTo($"/dashboard/chats/order/{preview.ContextPublicId}");
        }
    }

    // ***** SignalR ***** //

    private HubConnection _HubConnection { get; set; }

    private async Task ConnectSignalR()
    {
        _HubConnection = new HubConnectionBuilder()
            .WithUrl(_NavigationManager.ToAbsoluteUri($"/chathub"))
            .WithAutomaticReconnect()
            .Build();

        _HubConnection.On<Tuple<string, ChatMessageDto>>("MessageCreated", data =>
        {
            string chatPublicId = data.Item1;
            ChatMessageDto message = data.Item2;

            // Update the chat preview to use this preview message

            foreach (ChatThreadPreviewDto preview in ChatPreviews.Where(cp => cp.ChatThread?.PublicId == chatPublicId))
            {
                preview.PreviewMessage = message;

                StateHasChanged();
            }
        });


        await _HubConnection.StartAsync();
    }

    // ***** Utils ***** //

    private string GetInitials(string? username)
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            return "?";
        }

        var parts = username.Split(' ', StringSplitOptions.RemoveEmptyEntries);

        if (parts.Length == 1)
        {
            return parts[0].Substring(0, 1).ToUpper();
        }

        return string.Concat(parts[0][0], parts[1][0]).ToUpper();
    }

    // ***** Injects ***** //

    [Inject]
    private ChatService _ChatService {get;set;}

    [Inject]
    private NavigationManager _NavigationManager { get; set; }
}
