
@inherits LayoutComponentBase

@namespace Orderly.Client.Pages.Shared
@layout MainLayout

<style>
    .nav-link.active {
        background-color: #3B82F6;
        color: white;
    }

    .nav-link:hover {
        text-decoration: underline;
        color: #3B82F6;
    }
</style>

<div class="dashboard-layout flex flex-1 pt-[4rem]">
    @if (!IsDesktop && IsSidebarOpen)
    {
        <div class="fixed inset-0 bg-black/40 z-40" @onclick="CloseSidebar"></div>
    }


    @*
        Sidebar
    *@

    <aside class="@($"dashboard-sidebar flex flex-col bg-lightcard dark:bg-darkcard text-lightfg dark:text-darkfg shadow-lg transition-all duration-300 z-50 fixed top-16 left-0 h-[calc(100%-4rem)] {(IsSidebarOpen ? "w-64" : "w-0 overflow-hidden")}")">
        <nav class="flex flex-col gap-3 mt-4 px-2">
            <NavLink href="/dashboard/overview"
                     class="flex items-center gap-3 px-3 py-2 rounded-lg text-lg font-medium transition-colors duration-300
                            hover:text-primary dark:hover:text-primary"
                     activeClass="bg-primary text-white">
                <i class="bi bi-speedometer2 text-lg"></i>
                <span>Overview</span>
            </NavLink>

            <NavLink href="/dashboard/products"
                     class="flex items-center gap-3 px-3 py-2 rounded-lg text-lg font-medium transition-colors duration-300
                            hover:text-primary dark:hover:text-primary"
                     activeClass="bg-primary text-white">
                <i class="bi bi-box-seam text-lg"></i>
                <span>Products</span>
            </NavLink>

            <div>
                <button @onclick="ToggleOrdersDropdown"
                        class="flex items-center justify-between w-full px-3 py-2 rounded-lg text-lg font-medium
                           hover:text-primary dark:hover:text-primary transition-colors duration-300">
                    <div class="flex items-center gap-3">
                        <i class="bi bi-basket text-lg"></i>
                        <span>Orders</span>
                    </div>
                    <i class="@($"bi {(OrdersExpanded ? "bi-chevron-up" : "bi-chevron-down")}")"></i>
                </button>

                <div class="@($"overflow-hidden transition-all duration-300 gap-3 pl-6 {(OrdersExpanded ? "max-h-40" : "max-h-0")}")">
                    <NavLink href="/dashboard/orders/placed"
                             class="flex items-center gap-2 px-3 py-1 rounded-lg text-base font-medium transition-colors duration-300
                                hover:text-primary dark:hover:text-primary"
                             activeClass="bg-primary text-white">
                        <i class="bi bi-cart-check-fill text-base"></i>
                        Placed
                    </NavLink>
                    <NavLink href="/dashboard/orders/received"
                             class="flex items-center gap-2 px-3 py-1 rounded-lg text-base font-medium transition-colors duration-300
                                hover:text-primary dark:hover:text-primary"
                             activeClass="bg-primary text-white">
                        <i class="bi bi-box-arrow-in-down text-base"></i>
                        Received
                    </NavLink>
                </div>
            </div>

            <NavLink href="/dashboard/chats"
                     class="flex items-center gap-3 px-3 py-2 rounded-lg text-lg font-medium transition-colors duration-300
                        hover:text-primary dark:hover:text-primary"
                     activeClass="bg-primary text-white">
                <i class="bi bi-chat-dots text-lg"></i>
                <span>Chats</span>
            </NavLink>
        </nav>
    </aside>

    @*
        Main Content
    *@

    <main class="@MainClasses">
        @*
            Mobile Sidebar Toggle
        *@

        <div class="p-4 border-b border-lightborder dark:border-darkborder md:hidden bg-lightbg dark:bg-darkbg">
            <button @onclick="ToggleSidebar"
                    class="flex items-center gap-2 text-lightfg dark:text-darkfg hover:opacity-75">
                <i class="bi bi-list text-2xl"></i>
                <span class="font-semibold">Menu</span>
            </button>
        </div>

        @*
            Body
        *@

        <div>
            @Body
        </div>
    </main>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        // Try to get width immediately before rendering for correct initial layout
        if (JS is IJSInProcessRuntime inProcessJs)
        {
            int width = inProcessJs.Invoke<int>("windowInterop.getWidth");
            UpdateDesktopState(width);
        }
        else
        {
            // Fallback if in-process runtime not available (e.g. prerender)
            int width = await JS.InvokeAsync<int>("windowInterop.getWidth");
            UpdateDesktopState(width);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register resize listener after initial render
            await JS.InvokeVoidAsync(
                "windowInterop.registerResizeHandler",
                DotNetObjectReference.Create(this)
            );
        }
    }

    private string GetNavLinkClasses(string path)
    {
        bool isActive = IsLinkActive(path);

        return $"flex items-center gap-2 px-4 pt-1 pb-2 rounded-md relative font-medium text-[1.05rem] transition-all duration-200 " +
               $"{(isActive ? "bg-[var(--primary)] text-[var(--fg)]" : "text-lightfg dark:text-darkfg")} " +
               $"hover:text-[var(--primary)]";
    }

    private bool IsLinkActive(string path)
    {
        return _NavigationManager.Uri.Contains(path, StringComparison.OrdinalIgnoreCase);
    }

    private string MainClasses
    {
        get
        {
            return $"flex-1 transition-all duration-300 {(IsDesktop ? "ml-64" : "")} bg-lightbg dark:bg-darkbg";
        }
    }

    // ***** Desktop States ***** //

    private bool IsDesktop = false;

    [JSInvokable]
    public void UpdateWidth(int width)
    {
        UpdateDesktopState(width);

        StateHasChanged();
    }

    private void UpdateDesktopState(int width)
    {
        IsDesktop = width >= 768;

        if (IsDesktop)
        {
            IsSidebarOpen = true;
        }
        else
        {
            IsSidebarOpen = false;
        }
    }

    // ***** Sidebar ***** //

    private bool IsSidebarOpen = false;

    private void ToggleSidebar()
    {
        IsSidebarOpen = !IsSidebarOpen;
    }

    private void CloseSidebar()
    {
        IsSidebarOpen = false;
    }

    // ***** Sidebar Dropdowns ***** //

    private bool OrdersExpanded = true;

    private void ToggleOrdersDropdown()
    {
        OrdersExpanded = !OrdersExpanded;
    }

    // ***** Injects ***** //

    [Inject]
    private NavigationManager _NavigationManager { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }
}
