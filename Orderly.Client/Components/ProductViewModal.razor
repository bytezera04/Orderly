
@using Orderly.Shared.Dtos

@namespace Orderly.Client.Components

<link rel="stylesheet" href="css/modal.css" />
<link rel="stylesheet" href="css/tagify.css" />
<link href="https://cdn.jsdelivr.net/npm/@@yaireo/tagify/dist/tagify.css" rel="stylesheet" />

<script src="js/formatting.js"></script>
<script src="js/tagifyInterop.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@@yaireo/tagify"></script>

@if (IsVisible && ProductToView is not null)
{
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-lightcard dark:bg-darkcard rounded-2xl shadow-2xl w-[95%] sm:max-w-2xl p-6 relative"
             @onclick:stopPropagation="true">

             @*
                 Header
             *@

            <div class="flex justify-between items-center mb-6">
                <!-- Title -->

                <h3 class="text-2xl font-bold text-primary">@ProductToView.Name</h3>

                <!-- Close Button -->

                <button class="text-gray-400 hover:text-red-500 transition"
                        @onclick="OnCloseClicked">
                    ✕
                </button>
            </div>

            @*
                Product Info
            *@

            <div class="space-y-4 text-lightfg dark:text-darkfg text-sm">
                <!-- Description -->

                <p class="text-lightfg dark:text-darkfg">@ProductToView.Description</p>

                <!-- Stock & Price -->

                <div class="grid grid-cols-2 gap-4">
                    <div class="flex justify-between">
                        <span class="font-semibold">Stock:</span>
                        <span class="text-primary">@ProductToView.Stock</span>
                    </div>
                    <div class="flex justify-between">
                        <span class="font-semibold">Price:</span>
                        <span class="text-money">£@ProductToView.Price.ToString("F2")</span>
                    </div>
                </div>

                <!-- Tags -->

                @if (ProductToView.Tags?.Any() is true)
                {
                    <div>
                        <label class="block font-medium text-sm mb-1 text-lightfg dark:text-darkfg">Tags</label>
                        <input id="tagsInput" type="text" class="w-full rounded-lg border border-gray-300 dark:border-gray-600 p-2 bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg" />
                    </div>
                }
            </div>

            @*
                Actions
            *@

            <div class="mt-6 flex justify-end">
                <!-- Close Button -->

                <button class="px-4 py-2 rounded-lg bg-primary text-white font-semibold hover:bg-primary/90 transition"
                        @onclick="OnCloseClicked">
                    Close
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public ProductDto? ProductToView { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private bool IsTagifyInitialized { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible && ProductToView is not null)
        {
            if (!IsTagifyInitialized)
            {
                await JS.InvokeVoidAsync("tagifyInterop.initReadonly", "tagsInput", ProductToView.Tags);

                IsTagifyInitialized = true;
            }
        }
        else
        {
            IsTagifyInitialized = false;
        }
    }

    public async Task OnCloseClicked()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
    }

    [Inject]
    private IJSRuntime JS { get; set; }
}
