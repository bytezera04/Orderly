
@using Microsoft.AspNetCore.SignalR.Client
@using Orderly.Client.Services
@using Orderly.Shared.Dtos
@using Orderly.Shared.Helpers

@implements IAsyncDisposable

@namespace Orderly.Client.Components

<div class="product-table flex flex-col w-full space-y-4">
    @*
        Search Inputs
    *@

    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <!-- Search Bar-->

        <input type="text"
               placeholder="Search products..."
               class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-primary dark:bg-darkcard dark:border-darkborder dark:text-darkfg"
               @oninput="OnSearchInput" />

        <!-- Category Dropdown -->

        <select class="w-full sm:w-auto px-4 py-2 border rounded-md h-[calc(2.5rem)] dark:bg-darkcard dark:border-darkborder dark:text-darkfg"
                @onchange=OnCategoryInput>

            <option value="">All Categories</option>

            @foreach (var category in Categories)
            {
                <option value="@category">@category</option>
            }
        </select>
    </div>

    @*
        Product Table (Desktop)
    *@

    <div class="overflow-hidden border border-lightborder dark:border-darkborder rounded-lg shadow hidden md:block">
        <table class="min-w-full divide-y divide-lightborder dark:divide-darkborder">
            <thead class="bg-lightcard dark:bg-darkcard">
                <tr>
                    <th scope="col" class="px-6 py-3 text-left text-sm font-semibold text-lightfg dark:text-darkfg">
                        ID
                    </th>

                    @foreach (var col in Columns)
                    {
                        <th scope="col"
                            class="px-6 py-3 text-left text-sm font-semibold text-lightfg dark:text-darkfg cursor-pointer select-none"
                            @onclick="() => SortBy(col.Property)">
                            @col.Title
                            <span>@GetSortIndicator(col.Property)</span>
                        </th>
                    }

                    @if (DisplayActionsColumn())
                    {
                        <th scope="col" class="px-6 py-3 text-left text-sm font-semibold text-lightfg dark:text-darkfg">
                            Actions
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="bg-lightbg dark:bg-darkbg divide-y divide-lightborder dark:divide-darkborder text-lightfg dark:text-darkfg">
                @for (int i = 0; i < PageSize; i++)
                {
                    if (i < PagedProducts.Count())
                    {
                        var product = PagedProducts.ElementAt(i);

                        <tr class="hover:bg-lightcard/20 dark:hover:bg-darkcard/20 transition cursor-pointer h-[64px]"
                            @onclick="() => OpenViewModal(product)">

                            <td class="px-6 truncate font-bold text-primary">#@product.PublicId</td>
                            <td class="px-6 truncate">@product.Name</td>
                            <td class="px-6 truncate">@product.Category</td>
                            <td class="px-6 truncate">£@product.Price</td>
                            <td class="px-6 truncate">@product.Stock</td>
                            <td class="px-6 truncate">@product.Sales</td>
                            <td class="px-6 truncate">@product.CreatedAt.ToString("dd/MM/yyyy")</td>
                            @if (DisplayActionsColumn())
                            {
                                <td class="px-6">
                                    <div class="flex items-center justify-center gap-3">
                                        @if (CanEditProducts)
                                        {
                                            <button class="text-blue-500 hover:text-blue-600 transition text-lg"
                                                    @onclick="@(() => OpenEditModal(product))">
                                                <i class="bi bi-pencil-fill"></i>
                                            </button>
                                        }
                                        @if (CanDeleteProducts)
                                        {
                                            <button class="text-red-500 hover:text-red-600 transition text-lg"
                                                    @onclick="@(() => OpenDeleteModal(product))">
                                                <i class="bi bi-trash-fill"></i>
                                            </button>
                                        }
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                    else
                    {
                        <tr class="h-[64px]">
                            <td colspan="@Columns.Count + (DisplayActionsColumn() ? 1 : 0)"></td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    @*
        Product Cards (Mobile)
    *@

    <div class="space-y-3 md:hidden">
        @foreach (var product in PagedProducts)
        {
            <div class="p-4 bg-lightcard dark:bg-darkcard rounded-lg shadow hover:shadow-md transition"
                @onclick="() => OpenViewModal(product)">

                <div class="flex justify-between items-center">
                    <div>
                        <p class="font-semibold text-lightfg dark:text-darkfg">@product.Name</p>
                        <p class="text-sm text-gray-500 dark:text-gray-400">@product.Category</p>
                    </div>
                    <p class="text-primary font-semibold">£@product.Price</p>
                </div>

                <div class="mt-2 text-sm text-lightfg dark:text-darkfg">
                    <p><span class="font-medium">Stock:</span> @product.Stock</p>
                    <p><span class="font-medium">Sales:</span> @product.Sales</p>
                    <p><span class="font-medium">Created:</span> @DateTimeHelper.ToReadableDateShort(product.CreatedAt)</p>
                </div>

                @if (DisplayActionsColumn())
                {
                    <div class="mt-3 flex gap-3">
                        @if (CanEditProducts)
                        {
                            <button class="px-3 py-1 rounded-md bg-blue-500 text-white text-sm hover:bg-blue-600"
                                    @onclick="@(() => OpenEditModal(product))">
                                Edit
                            </button>
                        }
                        @if (CanDeleteProducts)
                        {
                            <button class="px-3 py-1 rounded-md bg-red-500 text-white text-sm hover:bg-red-600"
                                    @onclick="@(() => OpenDeleteModal(product))">
                                Delete
                            </button>
                        }
                    </div>
                }
            </div>
        }
    </div>

    @*
        Pagination
    *@

    <div class="flex items-center justify-center gap-4 mt-2">
        <button class="p-2 rounded-md hover:bg-lightcard/50 dark:hover:bg-darkcard/50"
                @onclick="PreviousPage" disabled="@IsFirstPage">
            <i class="bi bi-chevron-left text-lg"></i>
        </button>

        <span class="text-sm text-lightfg dark:text-darkfg">Page @Page of @TotalPages</span>

        <button class="p-2 rounded-md hover:bg-lightcard/50 dark:hover:bg-darkcard/50"
                @onclick="NextPage" disabled="@IsLastPage">
            <i class="bi bi-chevron-right text-lg"></i>
        </button>
    </div>
</div>

<!-- Product View Modal -->

<ProductViewModal ProductToView="@SelectedProduct"
                  IsVisible="@IsViewModalVisible"
                  OnClose="@CloseViewModal" />

<!-- Product Edit Modal -->

<ProductEditModal ProductToEdit="@SelectedProduct"
                  IsVisible="@IsEditModalVisible"
                  OnSave="@CloseEditModal"
                  OnCancel="@CloseEditModal" />

<!-- Product Delete Modal -->

<ProductDeleteModal ProductToDelete="@SelectedProduct"
                  IsVisible = "@IsDeleteModalVisible"
                  OnDelete="@CloseDeleteModal"
                  OnCancel="@CloseDeleteModal"/>

@code {
    [Parameter]
    public bool CanEditProducts { get; set; } = false;

    [Parameter]
    public bool CanDeleteProducts { get; set; } = false;

    private ProductDto? SelectedProduct { get; set; }

    private bool IsViewModalVisible = false;
    private bool IsEditModalVisible = false;
    private bool IsDeleteModalVisible = false;

    private List<ProductDto> Products = new();

    private int Page = 1;
    private const int PageSize = 10;

    private string SearchText = string.Empty;
    private string? SelectedCategory;
    private string SortColumn = nameof(ProductDto.CreatedAt);
    private bool SortAscending = false;

    private bool IsLoading = true;

    private IEnumerable<ProductDto> FilteredProducts
    {
        get
        {
            return Products
                .Where(p => string.IsNullOrWhiteSpace(SearchText) || p.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase))
                .Where(p => string.IsNullOrWhiteSpace(SelectedCategory) || p.Category == SelectedCategory)
                .OrderByDynamic(SortColumn, SortAscending);
        }
    }

    private IEnumerable<ProductDto> PagedProducts
    {
        get
        {
            return FilteredProducts
                .Skip((Page - 1) * PageSize)
                .Take(PageSize);
        }
    }

    private bool IsFirstPage
    {
        get
        {
            return Page <= 1;
        }
    }

    private bool IsLastPage
    {
        get
        {
            return Page >= TotalPages;
        }
    }

    private int TotalPages
    {
        get
        {
            return (int)Math.Ceiling((double)FilteredProducts.Count() / PageSize);
        }
    }

    private readonly List<(string Title, string Property)> Columns = new()
    {
        ("Name", nameof(ProductDto.Name)),
        ("Category", nameof(ProductDto.Category)),
        ("Price", nameof(ProductDto.Price)),
        ("Stock", nameof(ProductDto.Stock)),
        ("Sales", nameof(ProductDto.Sales)),
        ("Created", nameof(ProductDto.CreatedAt))
    };

    private List<string> Categories = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchProducts();

        Categories = Products
            .Select(prop => prop.Category)
            .Distinct()
            .ToList();

        await ConnectSignalR();
    }

    private async Task FetchProducts()
    {
        IsLoading = true;
        Products = await _ProductService.GetProductsAsync();
        IsLoading = false;
    }

    private void OnSearchInput(ChangeEventArgs e)
    {
        // Reset page number and set search text

        Page = 1;

        SearchText = e.Value?.ToString() ?? string.Empty;
    }

    private void OnCategoryInput(ChangeEventArgs e)
    {
        // Reset page number and set selected category

        Page = 1;

        SelectedCategory = e.Value?.ToString() ?? string.Empty;
    }

    private string GetColumnClass(string columnName)
    {
        return columnName switch
        {
            nameof(ProductDto.PublicId) => "public-id",
            nameof(ProductDto.Name) => "name",
            nameof(ProductDto.Category) => "category",
            nameof(ProductDto.Price) => "price",
            nameof(ProductDto.Stock) => "stock",
            nameof(ProductDto.Sales) => "sales",
            nameof(ProductDto.CreatedAt) => "created-at",
            _ => "auto"
        };
    }

    private bool DisplayActionsColumn()
    {
        return CanEditProducts || CanDeleteProducts;
    }

    // ***** Sorting ***** //

    private string GetSortClass(string columnName)
    {
        if (columnName != SortColumn)
            return string.Empty;

        return SortAscending ? "sort-asc" : "sort-desc";
    }

    string GetSortIndicator(string column)
    {
        if (SortColumn != column) return "";
        return SortAscending ? "▲" : "▼";
    }

    private void SortBy(string column)
    {
        if (SortColumn == column)
        {
            // This column is already selected, flip the sort direction

            SortAscending = !SortAscending;
        }
        else
        {
            // This column is different, apply it and default to descending
            // sort

            SortColumn = column;
            SortAscending = false;
        }
    }

    // ***** Paging ***** //

    private void NextPage()
    {
        if (!IsLastPage)
        {
            Page++;
        }
    }

    private void PreviousPage()
    {
        if (!IsFirstPage)
        {
            Page--;
        }
    }

    // ***** SignalR ***** //

    private HubConnection? _HubConnection;

    private async Task ConnectSignalR()
    {
        _HubConnection = new HubConnectionBuilder()
            .WithUrl(_NavigationManager.ToAbsoluteUri("/producthub"))
            .WithAutomaticReconnect()
            .Build();

        _HubConnection.On<ProductDto>("ProductCreated", product =>
        {
            // Add this product to the table if it doesn't exist

            if (!Products.Any(p => p.PublicId == product.PublicId))
            {
                Products.Insert(0, product);

                StateHasChanged();
            }
        });

        _HubConnection.On<ProductDto>("ProductUpdated", product =>
        {
            // Update the product (this assumes it's already in the table)

            int index = Products.FindIndex(p => p.PublicId == product.PublicId);

            if (index >= 0)
            {
                Products[index] = product;

                StateHasChanged();
            }
        });

        _HubConnection.On<string>("ProductDeleted", productPublicId =>
        {
            // Delete the product from the table if it exists

            ProductDto? product = Products.FirstOrDefault(p => p.PublicId == productPublicId);

            if (product is not null)
            {
                Products.Remove(product);

                StateHasChanged();
            }
        });

        await _HubConnection.StartAsync();
    }

    public async ValueTask Dispose()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.DisposeAsync();
        }
    }

    // ***** View Product Modal ***** //

    private void OpenViewModal(ProductDto product)
    {
        SelectedProduct = product;
        IsViewModalVisible = true;
    }

    private void CloseViewModal()
    {
        SelectedProduct = null;
        IsViewModalVisible = false;
    }

    // ***** Edit Product Modal ***** //

    private void OpenEditModal(ProductDto product)
    {
        SelectedProduct = product;
        IsEditModalVisible = true;
    }

    private void CloseEditModal()
    {
        SelectedProduct = null;
        IsEditModalVisible = false;
    }

    // ***** Delete Product Modal ***** //

    private void OpenDeleteModal(ProductDto product)
    {
        SelectedProduct = product;
        IsDeleteModalVisible = true;
    }

    private Task CloseDeleteModal()
    {
        IsDeleteModalVisible = false;
        return Task.CompletedTask;
    }

    // ***** Misc ***** //

    public async ValueTask DisposeAsync()
    {
        if (_HubConnection is not null)
        {
            await _HubConnection.StopAsync();
            await _HubConnection.DisposeAsync();
        }
    }

    // ***** Injections ***** //

    [Inject]
    private ProductService _ProductService { get; set; }

    [Inject]
    private NavigationManager _NavigationManager { get; set; }
}
