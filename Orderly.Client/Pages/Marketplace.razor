
@using Orderly.Client.Components
@using Orderly.Client.Pages.Shared
@using Orderly.Client.Services
@using Orderly.Shared.Dtos
@using Orderly.Shared.Helpers
@using Orderly.Shared.Responses

@page "/marketplace"
@namespace Orderly.Client.Pages
@layout MainLayout

<PageTitle>Marketplace - Orderly</PageTitle>

<style>
    @@keyframes shimmer-light {
        0% {
            background-position: -450px 0;
        }

        100% {
            background-position: 450px 0;
        }
    }

    @@keyframes shimmer-dark {
        0% {
            background-position: -450px 0;
        }

        100% {
            background-position: 450px 0;
        }
    }

    .animate-shimmer-light {
        background: linear-gradient(90deg, rgba(229,229,229,0.8) 25%, rgba(245,245,245,0.6) 50%, rgba(229,229,229,0.8) 75%);
        background-size: 900px 100%;
        animation: shimmer-light 1.5s infinite linear;
    }

    .animate-shimmer-dark {
        background: linear-gradient(90deg, rgba(55,65,81,0.8) 25%, rgba(75,85,99,0.6) 50%, rgba(55,65,81,0.8) 75%);
        background-size: 900px 100%;
        animation: shimmer-dark 1.5s infinite linear;
    }

    input[type=number]::-webkit-inner-spin-button,
    input[type=number]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    input[type=number] {
        -moz-appearance: textfield;
    }

    input[type="checkbox"].accent-primary {
        accent-color: var(--primary);
    }

</style>

<div class="pt-32 pb-24 min-h-screen bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 space-y-8">
        @*
            Title
        *@

        <h1 class="text-4xl font-bold text-lightfg dark:text-darkfg">Marketplace</h1>

        @*
            Search Inputs
        *@

        <div class="w-full flex flex-col gap-4 mb-6">
            <div class="flex flex-col sm:flex-row flex-wrap gap-4">
                <!-- Search Bar -->

                <input type="text"
                       placeholder="Search products..."
                       class="flex-1 min-w-[200px] h-11 px-4 rounded-lg border border-lightborder dark:border-darkborder
                      bg-lightbg dark:bg-darkcard text-lightfg dark:text-darkfg
                      focus:outline-none focus:ring-2 focus:ring-primary transition"
                       value="@SearchText"
                       @onchange="OnSearchTextChange" />

                <!-- Category -->

                <select class="h-11 px-4 rounded-lg border border-lightborder dark:border-darkborder
                       bg-lightbg dark:bg-darkcard text-lightfg dark:text-darkfg
                       focus:outline-none focus:ring-2 focus:ring-primary transition"
                        @bind-value="SelectedCategory"
                        @bind-value:event="oninput"
                        @bind-value:after="PerformSearch">

                    <option value="">All Categories</option>
                    @foreach (var cat in CategoryOptions)
                    {
                        <option value="@cat">@cat</option>
                    }
                </select>

                <!-- Price Range -->

                <div class="flex items-center gap-3">
                    <div class="relative">
                        <span class="absolute left-2 top-1/2 -translate-y-1/2 text-lightfg/70 dark:text-darkfg/70">£</span>
                        <input type="number" placeholder="Min"
                               class="w-28 h-11 pl-7 pr-3 rounded-lg border border-lightborder dark:border-darkborder
                              bg-lightbg dark:bg-darkcard text-lightfg dark:text-darkfg
                              focus:outline-none focus:ring-2 focus:ring-primary text-sm transition"
                               @bind-value="MinPrice"
                               @bind-value:event="oninput"
                               @bind-value:after="PerformSearch" />
                    </div>

                    <span class="text-lightfg/60 dark:text-darkfg/60 text-sm">-</span>

                    <div class="relative">
                        <span class="absolute left-2 top-1/2 -translate-y-1/2 text-lightfg/70 dark:text-darkfg/70">£</span>
                        <input type="number" placeholder="Max"
                               class="w-28 h-11 pl-7 pr-3 rounded-lg border border-lightborder dark:border-darkborder
                              bg-lightbg dark:bg-darkcard text-lightfg dark:text-darkfg
                              focus:outline-none focus:ring-2 focus:ring-primary text-sm transition"
                               @bind-value="MaxPrice"
                               @bind-value:event="oninput"
                               @bind-value:after="PerformSearch" />
                    </div>
                </div>

                <!-- Stock Only Toggle -->

                <label class="flex items-center gap-2 h-11 px-3 rounded-lg border border-lightborder dark:border-darkborder
                      bg-lightbg dark:bg-darkcard cursor-pointer text-lightfg dark:text-darkfg
                      hover:border-primary transition">
                    <input type="checkbox" class="accent-primary"
                           @bind-value="InStockOnly"
                           @bind-value:event="oninput"
                           @bind-value:after="PerformSearch" />
                    <span class="text-sm">In Stock Only</span>
                </label>
            </div>

            <!-- Sort By -->

            <div class="flex justify-end">
                <div class="flex items-center gap-2">
                    <span class="text-sm font-medium text-lightfg/70 dark:text-darkfg/70">Sort by:</span>
                    <select class="h-11 px-3 rounded-lg border border-lightborder dark:border-darkborder
                           bg-lightbg dark:bg-darkcard text-lightfg dark:text-darkfg
                           focus:outline-none focus:ring-2 focus:ring-primary text-sm transition"
                            @bind-value="SortBy"
                            @bind-value:event="oninput"
                            @bind-value:after="PerformSearch">

                        <option value="relevant">Relevant</option>
                        <option value="lowhigh">Price: Low to High</option>
                        <option value="highlow">Price: High to Low</option>
                    </select>
                </div>
            </div>
        </div>

        @*
            Products
        *@

        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            @if (IsLoading)
            {
                @*
                    Load Skeletons
                *@

                @for (int i = 0; i < PageSize; i++)
                {
                    <div class="flex flex-col rounded-2xl border border-lightborder dark:border-darkborder shadow-sm overflow-hidden min-h-[380px] relative bg-lightcard dark:bg-darkcard">
                        <!-- Shimmer Overlay -->

                        <div class="absolute inset-0 rounded-2xl animate-shimmer-light dark:animate-shimmer-dark"></div>

                        <!-- Image Skeleton -->

                        <div class="h-40 w-full relative z-10 flex items-center justify-center rounded-t-2xl bg-lightcard/80 dark:bg-darkcard/80">
                            <i class="bi bi-box text-lightfg/40 dark:text-darkfg/40 text-3xl"></i>
                        </div>

                        <!-- Content Skeleton -->

                        <div class="flex-1 flex flex-col p-5 gap-3 relative z-10">
                            <!-- Title Skeleton -->

                            <div class="h-6 w-3/4 rounded bg-lightcard/80 dark:bg-darkcard/80"></div>

                            <!-- Category Badge Skeleton -->

                            <div class="h-5 w-24 rounded-full bg-lightcard/80 dark:bg-darkcard/80"></div>

                            <!-- Description Skeleton -->

                            <div class="flex flex-col gap-2">
                                <div class="h-4 w-full rounded bg-lightcard/80 dark:bg-darkcard/80"></div>
                                <div class="h-4 w-5/6 rounded bg-lightcard/80 dark:bg-darkcard/80"></div>
                                <div class="h-4 w-2/3 rounded bg-lightcard/80 dark:bg-darkcard/80"></div>
                            </div>

                            <!-- Footer Skeleton -->

                            <div class="mt-auto flex flex-col gap-2 pt-4 border-t border-lightborder/50 dark:border-darkborder/50">
                                <div class="h-5 w-1/4 rounded bg-lightcard/80 dark:bg-darkcard/80"></div>
                                <div class="h-4 w-1/2 rounded bg-lightcard/80 dark:bg-darkcard/80"></div>
                            </div>
                        </div>

                        <!-- Buy Button Skeleton -->

                        <div class="h-10 w-full rounded-b-2xl mt-auto relative z-10 bg-lightcard/80 dark:bg-darkcard/80"></div>
                    </div>
                }
            }
            else if (!Products.Any())
            {
                @*
                    No Products Found
                *@

                <div class="col-span-full text-center text-lightfg/80 dark:text-darkfg/80">
                    No products found.
                </div>
            }
            else
            {
                @*
                    Products
                *@

                @foreach (var product in Products)
                {
                    <div class="group relative flex flex-col rounded-2xl border border-lightborder dark:border-darkborder bg-lightbg dark:bg-darkbg shadow-sm hover:shadow-lg hover:-translate-y-1 transition-all duration-200 overflow-hidden min-h-[380px] cursor-pointer"
                        @onclick="() => OpenProductViewModal(product)">

                        <!-- Product image (placeholder) -->

                        <div class="h-40 w-full bg-gradient-to-br from-primary/20 to-primary/5 flex items-center justify-center text-primary text-3xl font-bold">
                            <i class="bi bi-box"></i>
                        </div>

                        <!-- Content -->

                        <div class="flex-1 flex flex-col p-5 gap-3">
                            <!-- Title -->

                            <h2 class="text-lg font-bold text-lightfg dark:text-darkfg truncate group-hover:text-primary transition">
                                @product.Name
                            </h2>

                            <!-- Category badge -->

                            <span class="inline-block self-start px-3 py-1 text-xs font-semibold rounded-full @GetCategoryBadgeClasses(product.Category)">
                                @product.Category
                            </span>

                            <!-- Description -->

                            <p class="text-sm text-lightfg/70 dark:text-darkfg/70 line-clamp-3">
                                @StringHelper.Truncate(product.Description, 300)
                            </p>

                            <!-- Footer -->

                            <div class="mt-auto flex flex-col gap-2 pt-4 border-t border-lightborder/50 dark:border-darkborder/50">
                                <!-- Price + Stock -->

                                <div>
                                    <span class="block text-xl font-bold text-money">£@product.Price</span>
                                    <span class="text-sm font-medium @((product.Stock > 0) ? "text-primary" : "text-red-500")">
                                        @((product.Stock > 0) ? $"In Stock: {product.Stock}" : "Out of Stock")
                                    </span>
                                </div>

                                <!-- Owner -->

                                <span class="text-sm text-lightfg/70 dark:text-darkfg/70">
                                    Sold by @product.OwnerDisplayName
                                </span>
                            </div>
                        </div>

                        <!-- Buy button -->

                        <button class="w-full bg-primary text-white text-sm font-medium py-3 rounded-b-2xl hover:bg-primary/90 transition"
                            @onclick="() => OnBuyClicked(product)"
                            @onclick:stopPropagation="true">
                                Buy Now
                        </button>
                    </div>
                }
            }
        </div>

        @*
            Pagination
        *@

        <div class="flex items-center justify-center gap-4 mt-4">
            <button class="p-2 rounded-md hover:bg-lightcard/50 dark:hover:bg-darkcard/50"
                    @onclick="PreviousPage" disabled="@IsFirstPage">
                <i class="bi bi-chevron-left text-lg"></i>
            </button>

            <span class="text-sm text-lightfg dark:text-darkfg">Page @Page of @TotalPages</span>

            <button class="p-2 rounded-md hover:bg-lightcard/50 dark:hover:bg-darkcard/50"
                    @onclick="NextPage" disabled="@IsLastPage">
                <i class="bi bi-chevron-right text-lg"></i>
            </button>
        </div>
    </div>
</div>

<!-- Product View Modal -->

<ProductViewModal IsVisible="@IsProductViewModalVisible"
                  ProductToView="@SelectedProduct"
                  OnClose="@CloseProductViewModal" />

<!-- Order View Modal -->

<OrderCreateModal IsVisible="@IsOrderCreateModalVisible"
                  ProductToOrder="@SelectedProduct"
                  OnCreate="@CloseOrderCreateModal"
                  OnCancel="@CloseOrderCreateModal" />

<script>
    window.scrollHelpers = {
        getScrollY: function () {
            return window.scrollY || window.pageYOffset;
        },
        setScrollY: function (y) {
            window.scrollTo(0, y);
        }
    };
</script>

@code {
    List<ProductDto> Products = new();

    private readonly List<string> CategoryOptions = new()
    {
        "Electronics",
        "Clothing",
        "Books",
        "Toys",
        "Home"
    };

    string SearchText = "";
    string SelectedCategory = "";
    decimal? MinPrice = null;
    decimal? MaxPrice = null;
    bool InStockOnly = false;
    string SortBy = "relevant";

    private bool IsLoggedIn = false;

    private ProductDto? SelectedProduct = null;

    bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        // Check logged in status

        AuthenticationState authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsLoggedIn = user.Identity is not null && user.Identity.IsAuthenticated;

        // Load products

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        IsLoading = true;

        StateHasChanged(); // Show skeletons

        await Task.Delay(300); // Required to make skeleton transition smooth

        MarketplaceResponse? response = await _MarketplaceService.GetProductsAsync(
            SearchText,
            SelectedCategory,
            MinPrice,
            MaxPrice,
            InStockOnly,
            SortBy,
            Page
        );

        Products = response?.Products ?? new();

        // Total pages is the total amount of products / size of each page (must round up)
        TotalPages = (int)Math.Ceiling((double)(response?.TotalCount ?? 1) / PageSize);

        StateHasChanged(); // Show products

        IsLoading = false;
    }

    private async Task PerformSearch()
    {
        Page = 1;

        await LoadProducts();
    }

    private async Task OnSearchTextChange(ChangeEventArgs e)
    {
        SearchText = e.Value?.ToString() ?? string.Empty;

        await PerformSearch();
    }

    private void OnBuyClicked(ProductDto product)
    {
        if (IsLoggedIn)
        {
            OpenOrderCreateModal(product);
        }
        else
        {
            NavigateToLogin();
        }
    }

    private string GetCategoryBadgeClasses(string category)
    {
        return category switch
        {
            "Electronics" => "bg-blue-800 text-blue-100",
            "Clothing" => "bg-pink-800 text-pink-100",
            "Books" => "bg-green-800 text-green-100",
            "Toys" => "bg-yellow-800 text-yellow-100",
            "Home" => "bg-purple-800 text-purple-100",
            _ => "bg-gray-800 text-gray-100"
        };
    }

    // ***** Paging ***** //

    int Page = 1;
    const int PageSize = 12;
    int TotalPages = 1;

    private bool IsFirstPage
    {
        get
        {
            return Page == 1;
        }
    }

    private bool IsLastPage
    {
        get
        {
            return Page >= TotalPages;
        }
    }

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            Page--;

            await SaveScrollPosition();

            await LoadProducts();

            await RestoreScrollPosition();
        }
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            Page++;

            await SaveScrollPosition();

            await LoadProducts();

            await RestoreScrollPosition();
        }
    }

    // ***** Scroll Positioning ***** //

    private double ScrollPosition = 0;

    private async Task SaveScrollPosition()
    {
        ScrollPosition = await JS.InvokeAsync<double>("scrollHelpers.getScrollY");
    }

    private async Task RestoreScrollPosition()
    {
        await JS.InvokeVoidAsync("scrollHelpers.setScrollY", ScrollPosition);
    }

    // ***** Product View Modal ***** //

    private bool IsProductViewModalVisible = false;

    private void OpenProductViewModal(ProductDto product)
    {
        SelectedProduct = product;
        IsProductViewModalVisible = true;
    }

    private void CloseProductViewModal()
    {
        SelectedProduct = null;
        IsProductViewModalVisible = false;
    }

    // ***** Order Create Modal ***** //

    private bool IsOrderCreateModalVisible = false;

    private void OpenOrderCreateModal(ProductDto product)
    {
        SelectedProduct = product;
        IsOrderCreateModalVisible = true;
    }

    private void CloseOrderCreateModal()
    {
        SelectedProduct = null;
        IsOrderCreateModalVisible = false;
    }

    // ***** Navigation ***** //

    private void NavigateToLogin()
    {
        _NavigationManager.NavigateTo("/login");
    }

    [Inject]
    private MarketplaceService _MarketplaceService { get; set; }

    [Inject]
    private AuthenticationStateProvider _AuthenticationStateProvider { get; set; }

    [Inject]
    private NavigationManager _NavigationManager { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }
}
