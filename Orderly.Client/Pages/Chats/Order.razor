
@using Microsoft.AspNetCore.SignalR.Client
@using Orderly.Client.Components
@using Orderly.Client.Pages.Shared
@using Microsoft.AspNetCore.Authorization
@using Orderly.Client.Services
@using Orderly.Shared.Dtos

@page "/dashboard/chats/order/{OrderPublicId}"
@namespace Orderly.Client.Pages.Chat
@layout DashboardLayout

@attribute [Authorize]

<PageTitle>Order Chat - Orderly</PageTitle>

@if (CurrentUser is null || CurrentOrder is null || CurrentChat is null)
{
    <div class="text-muted">Loading...</div>
}
else
{
    <ChatApp CanSendMessages="true"
                CurrentUser="@CurrentUser"
                CurrentChat="@CurrentChat"
                OnSend="@OnMessageSend">

                <SidebarContent>
                    @if (CurrentOrder is not null)
                    {
                        <div class="p-4 flex flex-col h-full min-h-0 md:h-full">
                            <!-- Title -->

                            <h5 class="text-lg font-semibold mb-4 text-lightfg dark:text-darkfg select-none">
                                Order Info
                            </h5>

                            <!-- Fields -->

                            <div class="flex flex-col gap-3 md:overflow-y-auto">
                                <div>
                                    <div class="text-xs uppercase text-lightfg/70 dark:text-darkfg/70 select-none">Order ID</div>
                                    <div class="text-sm font-medium text-primary">#@CurrentOrder.PublicId</div>
                                </div>

                                <div>
                                    <div class="text-xs uppercase text-lightfg/70 dark:text-darkfg/70 select-none">Status</div>
                                    <div class="text-sm font-medium text-lightfg dark:text-darkfg">@CurrentOrder.Status</div>
                                </div>

                                <div>
                                    <div class="text-xs uppercase text-lightfg/70 dark:text-darkfg/70 select-none">Product</div>
                                    <div class="text-sm font-medium text-lightfg dark:text-darkfg">@CurrentOrder.ProductDisplayName</div>
                                </div>

                                <div>
                                    <div class="text-xs uppercase text-lightfg/70 dark:text-darkfg/70 select-none">Total Price</div>
                                    <div class="text-sm font-medium text-lightfg dark:text-darkfg">£@CurrentOrder.Price</div>
                                </div>

                                <div>
                                    <div class="text-xs uppercase text-lightfg/70 dark:text-darkfg/70 select-none">@OtherUserTitle</div>
                                    <div class="text-sm font-medium text-lightfg dark:text-darkfg">@OtherUserDisplayName</div>
                                </div>
                            </div>

                            <!-- View More Button -->

                            <button class="mt-6 w-full flex items-center justify-center px-4 py-2 text-sm font-medium
                                            border border-primary rounded-xl transition
                                            text-primary dark:text-primary
                                            hover:bg-primary hover:text-white dark:hover:bg-primary/90"
                                    @onclick="ShowOrderViewModal">
                                <i class="bi bi-box-arrow-up-right mr-2"></i>
                                View More
                            </button>
                        </div>
                    }
                </SidebarContent>

    </ChatApp>
}

<!-- Order View Modal -->

<OrderViewModal IsVisible="@IsOrderViewModalVisible"
                OrderToView="@CurrentOrder"
                OnClose="@CloseOrderViewModal" />

@code {
    [Parameter]
    public string? OrderPublicId { get; set; }

    private UserDto? CurrentUser;

    private OrderDto? CurrentOrder;

    private ChatThreadDto? CurrentChat;

    private List<ChatMessageDto> Messages = new();

    private bool IsOrderViewModalVisible { get; set; } = false;

    private bool IsLoading = true;

    private bool IsSeller
    {
        get
        {
            return CurrentOrder?.Product?.Owner?.PublicId == CurrentUser?.PublicId;
        }
    }

    private string OtherUserTitle
    {
        get
        {
            return IsSeller
                ? "Customer"
                : "Seller";
        }
    }

    private string OtherUserDisplayName
    {
        get
        {
            return (IsSeller
                ? CurrentOrder?.ProductOwnerDisplayName
                : CurrentOrder?.CustomerDisplayName) ?? string.Empty;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (OrderPublicId is null)
        {
            return;
        }

        // Load the user

        CurrentUser = await _UserService.GetCurrentUser();

        if (CurrentUser is null)
        {
            await JS.InvokeVoidAsync("history.back");

            return;
        }

        // Load the order

        CurrentOrder = await _OrderService.GetOrder(OrderPublicId);

        if (CurrentOrder is null)
        {
            await JS.InvokeVoidAsync("history.back");

            return;
        }

        // Load the chat

        CurrentChat = await _ChatService.GetChatAsync(CurrentOrder.PublicId);

        if (CurrentChat is null)
        {
            return;
        }
    }

    private async Task OnMessageSend(string content)
    {
        if (CurrentChat is null)
        {
            return;
        }

        await _ChatService.CreateChatMessageAsync(CurrentChat, new ChatMessageDto
        {
            Content = content
        });
    }

    private void ShowOrderViewModal()
    {
        IsOrderViewModalVisible = true;
    }

    private Task CloseOrderViewModal()
    {
        IsOrderViewModalVisible = false;

        return Task.CompletedTask;
    }

    [Inject]
    private UserService _UserService { get; set; }

    [Inject]
    private OrderService _OrderService { get; set; }

    [Inject]
    private ChatService _ChatService { get; set; }

    [Inject]
    private NavigationManager _NavigationManager { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }
}
