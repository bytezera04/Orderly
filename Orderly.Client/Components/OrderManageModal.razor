
@using Orderly.Client.Services
@using Orderly.Shared.Dtos

@if (IsVisible && OrderToManage is not null)
{
    <div class="fixed inset-0 flex items-center justify-center z-50 bg-black/40">
        <div class="max-w-lg w-full mx-4 p-6 rounded-xl bg-lightcard dark:bg-darkcard border border-gray-200 dark:border-gray-700 shadow-lg">
            @*
                Header
            *@

            <!-- Title -->

            <h3 class="text-2xl font-bold text-primary mb-6">Manage Order</h3>

            @*
                Order Info
            *@

            <div class="mb-6 p-4 rounded-lg bg-lightbg/80 dark:bg-darkcard border border-gray-300 dark:border-gray-700 shadow-sm">
                <!-- Order ID -->

                <h4 class="text-lg font-semibold text-lightfg dark:text-darkfg mb-2">
                    Order ID: <span class="text-primary">#@OrderToManage.PublicId</span>
                </h4>

                <!-- Product Name -->

                <p class="text-sm text-lightfg/80 dark:text-darkfg/80 mb-2">
                    Product: @OrderToManage.ProductDisplayName
                </p>

                <!-- Other User's Name -->

                <p class="text-sm text-lightfg/80 dark:text-darkfg/80">
                    @OtherUserRole: <span class="font-medium">@OtherUserName</span>
                </p>
            </div>

            @*
                Order Management
            *@

            @if (CanEditOrders)
            {
                <!-- Edit Status -->

                <div class="mb-6">
                    <label class="block text-lightfg dark:text-darkfg mb-1 font-semibold">Status</label>
                    <select class="w-full rounded-md border border-gray-300 dark:border-gray-600 p-2 bg-lightbg dark:bg-darkbg text-lightfg dark:text-darkfg"
                            @bind="EditableOrder.Status" disabled="@(!IsStatusModifiable())">
                        @foreach (var status in StatusOptions)
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
            }
            else if (CanCancelOrders)
            {
                <!-- Cancel Order -->

                <div class="mb-6 p-3 rounded-md bg-lightbg/80 dark:bg-darkcard border border-gray-300 dark:border-gray-700 shadow-sm">
                    <p class="text-sm text-lightfg/80 dark:text-darkfg/80">
                        Are you sure you want to cancel this order?
                    </p>
                </div>
            }

            @*
                Actions
            *@

            <div class="flex justify-end gap-3 mb-4">
                <!-- Close Button -->

                <button class="px-4 py-2 rounded-md bg-gray-300 dark:bg-gray-700 text-gray-900 dark:text-gray-100 hover:opacity-90 transition"
                        @onclick="OnCloseClicked">
                    Close
                </button>

                @if (CanEditOrders)
                {
                    <!-- Edit Status Button -->

                    <button class="px-4 py-2 rounded-md bg-primary text-white font-medium hover:bg-secondary transition"
                            @onclick="OnEditClicked" disabled="@(!CanSubmitEdit())">
                        Save
                    </button>
                }
                else if (CanCancelOrders)
                {
                    <!-- Cancel Order Button -->

                    <button class="px-4 py-2 rounded-md bg-red-600 text-white font-medium hover:bg-red-700 transition"
                            @onclick="OnCancelClicked" disabled="@(!CanSubmitCancel())">
                        Cancel Order
                    </button>
                }
            </div>

            @*
                Messages
            *@

            <!-- Status Change Not Allowed -->

            @if (CanEditOrders || CanCancelOrders)
            {
                if (!IsStatusModifiable())
                {
                    <div class="mt-4 px-4 py-2 rounded-md bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 text-sm shadow-sm">
                        This order can't be modified because it has either been completed or cancelled.
                    </div>
                }
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public string UserRole { get; set; } = "Customer";

    [Parameter]
    public bool CanEditOrders { get; set; } = false;

    [Parameter]
    public bool CanCancelOrders { get; set; } = false;

    [Parameter]
    public OrderDto? OrderToManage { get; set; }

    [Parameter]
    public EventCallback OnEdit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private string OtherUserRole
    {
        get
        {
            return UserRole == "Seller"
                ? "Customer"
                : "Seller";
        }
    }

    private string OtherUserName
    {
        get
        {
            if (OrderToManage is null)
            {
                return "Unknown";
            }

            return UserRole == "Seller"
                ? OrderToManage.CustomerDisplayName
                : OrderToManage.ProductOwnerDisplayName;
        }
    }

    ///  <summary>
    ///     Editable order, used to write changes to before the user
    ///     clicks save
    /// </summary>
    private OrderDto EditableOrder = new();

    private readonly List<string> StatusOptions = new()
    {
        "Pending",
        "Processing",
        "Complete",
        "Cancelled"
    };

    protected override void OnParametersSet()
    {
        if (OrderToManage is not null)
        {
            EditableOrder = new OrderDto
            {
                PublicId = OrderToManage.PublicId,
                Customer = OrderToManage.Customer,
                Product = OrderToManage.Product,
                Status = OrderToManage.Status,
                Quantity = OrderToManage.Quantity,
                Price = OrderToManage.Price,
                Notes = OrderToManage.Notes,
                CreatedAt = OrderToManage.CreatedAt,
                IsDeleted = OrderToManage.IsDeleted
            };
        }
    }

    private async Task OnEditClicked()
    {
        if (OrderToManage is null || !IsStatusModifiable() || !CanSubmitEdit())
        {
            return;
        }

        // Submit the edit

        await _OrderService.UpdateOrderAsync(EditableOrder);

        // Fire edit then close event

        await OnEdit.InvokeAsync();

        await OnClose.InvokeAsync();
    }

    private async Task OnCancelClicked()
    {
        if (OrderToManage is null || !IsStatusModifiable() || !CanSubmitCancel())
        {
            return;
        }

        // Set the order status to cancelled

        EditableOrder.Status = "Cancelled";

        await _OrderService.UpdateOrderAsync(EditableOrder);

        // Fire cancel then close event

        await OnCancel.InvokeAsync();

        await OnClose.InvokeAsync();
    }

    private async Task OnCloseClicked()
    {
        await OnClose.InvokeAsync();
    }

    private bool CanSubmitEdit()
    {
        // Can't submit if the status isn't modifiable

        if (OrderToManage is null || !IsStatusModifiable())
        {
            return false;
        }

        // Edit can only be submitted if the status is different

        if (OrderToManage.Status == EditableOrder.Status)
        {
            return false;
        }

        // Edit can be submitted

        return true;
    }

    private bool CanSubmitCancel()
    {
        // Can't submit if the status isn't modifiable

        if (OrderToManage is null || !IsStatusModifiable())
        {
            return false;
        }

        // Cancel can be submitted

        return true;
    }

    private bool IsStatusModifiable()
    {
        if (OrderToManage is null)
        {
            return false;
        }

        // Status changes can only be submitted if the original status isn't
        // either complete or canceled

        if (OrderToManage.Status == "Complete" || OrderToManage.Status == "Cancelled")
        {
            return false;
        }

        // Status change can be submitted

        return true;
    }

    [Inject]
    private OrderService _OrderService { get; set; }
}
